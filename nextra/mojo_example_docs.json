{
  "decl": {
    "description": "",
    "kind": "package",
    "modules": [
      {
        "aliases": [],
        "description": "",
        "functions": [],
        "kind": "module",
        "name": "__init__",
        "structs": [],
        "summary": "",
        "traits": []
      }
    ],
    "name": "endia",
    "packages": [
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "Tensor",
                "summary": "",
                "value": "Array"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ndarray",
                "summary": "",
                "value": "Array"
              }
            ],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "default_fwd",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_fwd",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "default_fwd(mut curr: Array, args: List[Array])",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "default_vjp",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "primals",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "grad",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "out",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_vjp",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "default_vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "default_jvp",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "primals",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "tangents",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_jvp",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "default_jvp(primals: List[Array], tangents: List[Array]) -> Array",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "array",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "node",
                    "summary": "",
                    "type": "ArcPointer[Node]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "is_complex",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, shape: List[Int], requires_grad: Bool = False, is_complex: Bool = False)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array_shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "is_view",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, array_shape: ArrayShape, is_view: Bool = False)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "node",
                            "passingKind": "pos_or_kw",
                            "type": "ArcPointer[Node]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, node: ArcPointer[Node])",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "input_string",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, input_string: String, requires_grad: Bool = False)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self, *slices: Slice) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "kw",
                            "type": "Variant[SIMD[float32, 1], Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(mut self, *slices: Slice, *, value: Variant[SIMD[float32, 1], Array])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__neg__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__neg__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__neg__(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__lt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__lt__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__le__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__le__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__gt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__gt__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ge__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: Self) -> Bool",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ge__(self, other: SIMD[float32, 1]) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__add__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__sub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__matmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__matmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__matmul__(self, other: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__truediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__radd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__radd__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__radd__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rsub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rsub__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rsub__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmul__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmul__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmatmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmatmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmatmul__(self, other: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rtruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rtruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rtruediv__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rtruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rtruediv__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rpow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rpow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rpow__(self, other: Self) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rpow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rpow__(self, other: SIMD[float32, 1]) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iadd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(mut self, other: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(mut self, other: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__isub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(mut self, other: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(mut self, other: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__imul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(mut self, other: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(mut self, other: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__itruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(mut self, other: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(mut self, other: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ipow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ipow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ipow__(mut self, other: Self)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ipow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ipow__(mut self, other: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "id",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "id",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "id(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "id_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "id_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "id_(mut self, id: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "array_shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "array_shape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "ArrayShape",
                        "returnsDoc": "",
                        "signature": "array_shape(self) -> ArrayShape",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "array_shape_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "array_shape_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "array_shape_(mut self, shape: ArrayShape)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_computed",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_computed",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "is_computed(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_computed_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "is_computed",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_computed_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "is_computed_(mut self, is_computed: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_graph_node_computed",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_graph_node_computed",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "is_graph_node_computed(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_graph_node_computed_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "is_computed",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_graph_node_computed_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "is_graph_node_computed_(mut self, is_computed: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "postpone_as_grpah_output",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "postpone_as_grpah_output",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "postpone_as_grpah_output(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "args",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "args",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[Array]",
                        "returnsDoc": "",
                        "signature": "args(self) -> List[Array]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "args_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "args_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "args_(mut self, args: List[Array])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "clear_args",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "clear_args",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "clear_args(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "remove_grad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "remove_grad",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "remove_grad(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "kwargs",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "kwargs",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[Array]",
                        "returnsDoc": "",
                        "signature": "kwargs(self) -> List[Array]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "kwargs_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "kwargs",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "kwargs_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "kwargs_(mut self, kwargs: List[Array])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "id_in_graph_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "id_in_graph",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "id_in_graph_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "id_in_graph_(mut self, id_in_graph: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "id_in_graph",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "id_in_graph",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "id_in_graph(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "graph",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "graph",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "ArcPointer[FxGraph]",
                        "returnsDoc": "",
                        "signature": "graph(self) -> ArcPointer[FxGraph]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "data_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "data_ptr",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[float32, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "data_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "data_(mut self, owned data_ptr: UnsafePointer[SIMD[float32, 1]])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "graph_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "graph",
                            "passingKind": "pos_or_kw",
                            "type": "ArcPointer[FxGraph]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "graph_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "graph_(mut self, graph: ArcPointer[FxGraph])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_fxgraph",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_fxgraph",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "has_fxgraph(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_breakpoint",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_breakpoint",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "is_breakpoint(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_breakpoint_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "is_breakpoint",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_breakpoint_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "is_breakpoint_(mut self, is_breakpoint: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "item",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "item",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "item(self, idx: Int) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "setup_array_shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array_shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "setup_array_shape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "setup_array_shape(mut self, array_shape: ArrayShape)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "uew",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "uew",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]",
                        "returnsDoc": "",
                        "signature": "uew(self) -> List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "bew",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "bew",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]",
                        "returnsDoc": "",
                        "signature": "bew(self) -> List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "inplace_infos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "inplace_infos",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[InplaceInfo]",
                        "returnsDoc": "",
                        "signature": "inplace_infos(self) -> List[InplaceInfo]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "append_arg",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "append_arg",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "append_arg(mut self, arg: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "append_inplace_info",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "inplace_info",
                            "passingKind": "pos_or_kw",
                            "type": "InplaceInfo"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "append_inplace_info",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "append_inplace_info(mut self, inplace_info: InplaceInfo)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "append_uew",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "uew",
                            "passingKind": "pos_or_kw",
                            "type": "fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "append_uew",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "append_uew(mut self, uew: fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "append_bew",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "bew",
                            "passingKind": "pos_or_kw",
                            "type": "fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "append_bew",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "append_bew(mut self, bew: fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "shape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "shape(self) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "shape_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "shape_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "shape_(mut self, shape: List[Int])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "stride_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "stride_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "stride_(mut self, stride: List[Int])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "stride",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "stride",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "stride(self) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "storage_offset",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "storage_offset",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "storage_offset(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "storage_offset_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "storage_offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "storage_offset_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "storage_offset_(mut self, storage_offset: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ndim",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ndim",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "ndim(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "size",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "size",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "size(self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_view",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_view",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "is_view(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_view_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "is_view",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_view_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "is_view_(mut self, is_view: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "base_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "base",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "base_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "base_(mut self, base: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "base",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "base",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "base(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "requires_grad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "requires_grad",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "requires_grad(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "requires_grad_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "requires_grad_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "requires_grad_(mut self, requires_grad: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "meta_data",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "meta_data",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "meta_data(self) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "meta_data_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "meta_data",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "meta_data_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "meta_data_(mut self, meta_data: List[Int])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_real",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_real",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "has_real(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_real_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "has_real",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_real_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "has_real_(mut self, has_real: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_imag",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_imag",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "has_imag(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_imag_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "has_imag",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_imag_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "has_imag_(mut self, has_imag: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_complex",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "is_complex(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "is_complex_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "is_complex",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "is_complex_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "is_complex_(mut self, is_complex: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "data",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "data",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "UnsafePointer[SIMD[float32, 1]]",
                        "returnsDoc": "",
                        "signature": "data(self) -> UnsafePointer[SIMD[float32, 1]]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "real_idx",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "real_idx",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "real_idx(self, idx: Int) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "imag_idx",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "imag_idx",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "imag_idx(self, idx: Int) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[float32, width]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self, idx: Int) -> SIMD[float32, width]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int = 1](mut self, idx: Int, data: SIMD[float32, width])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load_imag",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load_imag",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[float32, width]",
                        "returnsDoc": "",
                        "signature": "load_imag[width: Int = 1](self, idx: Int) -> SIMD[float32, width]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store_imag",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store_imag",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store_imag[width: Int = 1](mut self, idx: Int, data: SIMD[float32, width])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load_complex",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Tuple[SIMD[float32, 2.__mul__(width).__floordiv__(2)], SIMD[float32, 2.__mul__(width).__floordiv__(2)]]",
                        "returnsDoc": "",
                        "signature": "load_complex[width: Int = 1](self, idx: Int) -> Tuple[SIMD[float32, 2.__mul__(width).__floordiv__(2)], SIMD[float32, 2.__mul__(width).__floordiv__(2)]]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "real",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, width]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "imag",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store_complex",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store_complex[width: Int = 1](mut self, idx: Int, real: SIMD[float32, width], imag: SIMD[float32, width])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "compute_jvp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "compute_jvp",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "compute_jvp(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "set_compute_jvp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "compute_jvp",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "set_compute_jvp",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "set_compute_jvp(mut self, compute_jvp: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "set_fwd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "fwd",
                            "passingKind": "pos_or_kw",
                            "type": "fn(mut Array, List[Array]) raises -> None"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "set_fwd",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "set_fwd(mut self, fwd: fn(mut Array, List[Array]) raises -> None)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fwd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fwd",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "fn(mut Array, List[Array]) raises -> None",
                        "returnsDoc": "",
                        "signature": "fwd(self) -> fn(mut Array, List[Array]) raises -> None",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "jvp_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "jvp",
                            "passingKind": "pos_or_kw",
                            "type": "fn(List[Array], List[Array]) raises -> Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "jvp_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "jvp_(mut self, jvp: fn(List[Array], List[Array]) raises -> Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "jvp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "jvp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "fn(List[Array], List[Array]) raises -> Array",
                        "returnsDoc": "",
                        "signature": "jvp(self) -> fn(List[Array], List[Array]) raises -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "vjp_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "vjp",
                            "passingKind": "pos_or_kw",
                            "type": "fn(List[Array], Array, Array) raises -> List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "vjp_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "vjp_(mut self, vjp: fn(List[Array], Array, Array) raises -> List[Array])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "vjp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "vjp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "fn(List[Array], Array, Array) raises -> List[Array]",
                        "returnsDoc": "",
                        "signature": "vjp(self) -> fn(List[Array], Array, Array) raises -> List[Array]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "has_grad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "has_grad",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "has_grad(self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "grad_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "grad",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "grad_",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "grad_(mut self, grad: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "grad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "grad",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "grad(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "set_name",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "name",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "set_name",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "set_name(mut self, name: String)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "name",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "name",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "name(self) -> String",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "execute_fwd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "execute_fwd",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "execute_fwd(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__str__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__str__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "__str__(self) -> String",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "write_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "writer",
                            "passingKind": "pos_or_kw",
                            "type": "W"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "write_to",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "W",
                            "passingKind": "pos_or_kw",
                            "type": "Writer"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "write_to[W: Writer](self, mut writer: W)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "execute_fwds",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "execute_fwds",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "execute_fwds(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "graph_dual",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "graph_dual",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "graph_dual(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "backward",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "create_graph",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "backward",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "backward(self, create_graph: Bool = False)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zero_grad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "zero_grad",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "zero_grad(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "T",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "T",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "T(self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "reshape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reshape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "reshape(self, shape: List[Int]) -> Self",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Array",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "Stringable",
                  "UnknownDestructibility",
                  "Writable"
                ],
                "summary": "Array is the primary data structure in the autograd engine. It serves as a wrapper around the Node struct, which encapsulates the array's data, shape, gradients, and other metadata."
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "node",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "id",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "name",
                    "summary": "",
                    "type": "String"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "shape",
                    "summary": "",
                    "type": "ArcPointer[ShapeNode]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "data",
                    "summary": "",
                    "type": "UnsafePointer[SIMD[float32, 1]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "is_view",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "base",
                    "summary": "",
                    "type": "List[ArcPointer[Node]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "args",
                    "summary": "",
                    "type": "List[ArcPointer[Node]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "kwargs",
                    "summary": "",
                    "type": "List[ArcPointer[Node]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "grads",
                    "summary": "",
                    "type": "List[ArcPointer[Node]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "fwd",
                    "summary": "",
                    "type": "fn(mut Array, List[Array]) raises -> None"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "uew",
                    "summary": "",
                    "type": "List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "bew",
                    "summary": "",
                    "type": "List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "simd_op_list",
                    "summary": "",
                    "type": "List[fn(SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "inplace_infos",
                    "summary": "",
                    "type": "List[InplaceInfo]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "jvp",
                    "summary": "",
                    "type": "fn(List[Array], List[Array]) raises -> Array"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "vjp",
                    "summary": "",
                    "type": "fn(List[Array], Array, Array) raises -> List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "requires_grad",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "compute_jvp",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "graph",
                    "summary": "",
                    "type": "Optional[ArcPointer[FxGraph]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "id_in_graph",
                    "summary": "",
                    "type": "Optional[Int]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "has_real",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "has_imag",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "meta_data",
                    "summary": "",
                    "type": "ArcPointer[List[Int]]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array_shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "is_complex",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "is_view",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, array_shape: ArrayShape, requires_grad: Bool = False, is_complex: Bool = False, is_view: Bool = False)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Node",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "Node is the central data structure representing an array in the autograd engine. It is responsible for encapsulating all the necessary information and metadata related to an array, including its shape, data, operations, gradients, and dependencies."
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "default_fwd",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_fwd",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "default_fwd(mut curr: Array, args: List[Array])",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "default_vjp",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "primals",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "grad",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "out",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_vjp",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "default_vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "default_jvp",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "primals",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "tangents",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "default_jvp",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "default_jvp(primals: List[Array], tangents: List[Array]) -> Array",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "utils",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "array_and_node",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "backward",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "create_graph",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "backward",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "backward(arg: Array, create_graph: Bool)",
                    "summary": "Performs backward propagation on the given Array."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "jacrev",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "create_graph",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacrev",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "jacrev(arg: Array, create_graph: Bool)",
                    "summary": "Computes the reverse-mode Jacobian for the given Array."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "grad",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "outs",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "inputs",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "",
                        "kind": "argument",
                        "name": "retain_grads",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "read",
                        "default": "False",
                        "description": "",
                        "kind": "argument",
                        "name": "create_graph",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "grad",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "grad(outs: List[Array], inputs: List[Array], retain_grads: Bool = True, create_graph: Bool = False) -> List[Array]",
                    "summary": "Computes gradients of outputs with respect to inputs."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "grad",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "grad(f: Callable, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the gradient of a Callable function with respect to specified arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "grad",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "grad(f: fn(List[Array]) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the gradient of a function that takes a list of Arrays and returns an Array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "grad",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "grad(f: fn(Array) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the gradient of a function that takes a single Array and returns an Array."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "jacobian",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jacobian(f: Callable, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Jacobian of a Callable function with respect to specified arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jacobian(f: fn(List[Array]) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Jacobian of a function that takes a list of Arrays and returns an Array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jacobian(f: fn(Array) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Jacobian of a function that takes a single Array and returns an Array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "jacobian(f: Callable, args: List[Array]) -> List[Array]",
                    "summary": "Computes the Jacobian of a Callable function with respect to given arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "jacobian(f: fn(List[Array]) raises -> Array, args: List[Array]) -> List[Array]",
                    "summary": "Computes the Jacobian of a function that takes a list of Arrays with respect to given arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jacobian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "jacobian(f: fn(Array) raises -> Array, arg: Array) -> Array",
                    "summary": "Computes the Jacobian of a function that takes a single Array with respect to the given argument."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "hessian",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "hessian(f: Callable, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Hessian of a Callable function with respect to specified arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "hessian(f: fn(List[Array]) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Hessian of a function that takes a list of Arrays and returns an Array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "hessian(f: fn(Array) raises -> Array, argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes the Hessian of a function that takes a single Array and returns an Array."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "hessian(f: Callable, args: List[Array]) -> List[Array]",
                    "summary": "Computes the Hessian of a Callable function with respect to given arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "hessian(f: fn(List[Array]) raises -> Array, args: List[Array]) -> List[Array]",
                    "summary": "Computes the Hessian of a function that takes a list of Arrays with respect to given arguments."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "f",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hessian",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "hessian(f: fn(Array) raises -> Array, arg: Array) -> Array",
                    "summary": "Computes the Hessian of a function that takes a single Array with respect to the given argument."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "value_and_grad",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Variant[Callable, fn(List[Array]) raises -> Array]"
                      },
                      {
                        "convention": "read",
                        "default": "List(-1)",
                        "description": "",
                        "kind": "argument",
                        "name": "argnums",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "value_and_grad",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "value_and_grad(arg: Variant[Callable, fn(List[Array]) raises -> Array], argnums: List[Int] = List(-1)) -> Callable",
                    "summary": "Computes both the value and gradient of a function or Callable with respect to specified arguments."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "functional",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "autograd",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "callable",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "args",
                    "summary": "",
                    "type": "ArcPointer[List[Array]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "argnums",
                    "summary": "",
                    "type": "List[List[Int]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "func",
                    "summary": "",
                    "type": "Variant[fn(List[Array]) raises -> Array, fn(Array) raises -> Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "captured_graph",
                    "summary": "",
                    "type": "ArcPointer[FxGraph]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "order_of_differentiation",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "optimize_jit",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "args_initialized",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "keep_intermediate_outs",
                    "summary": "",
                    "type": "Bool"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[fn(List[Array]) raises -> Array, fn(Array) raises -> Array]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "argnums",
                            "passingKind": "pos_or_kw",
                            "type": "List[List[Int]]"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "order_of_differentiation",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "True",
                            "description": "",
                            "kind": "argument",
                            "name": "optimize_jit",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "keep_intermediate_outs",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "compile_with_MAX",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, func: Variant[fn(List[Array]) raises -> Array, fn(Array) raises -> Array], argnums: List[List[Int]], order_of_differentiation: Int = 0, optimize_jit: Bool = True, keep_intermediate_outs: Bool = False, compile_with_MAX: Bool = False)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__call__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__call__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Variant[Array, List[Array], List[List[Array]]]",
                        "returnsDoc": "",
                        "signature": "__call__(self, args: List[Array]) -> Variant[Array, List[Array], List[List[Array]]]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Callable",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "Callable is the main data structure for Just-In-Time (JIT) compiling a function and computing gradients in a functional manner. It encapsulates the function, its arguments, and the captured computation graph, enabling dynamic optimization and execution."
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "jit",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Callable"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "",
                        "kind": "argument",
                        "name": "compile_with_MAX",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jit",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jit(arg: Callable, compile_with_MAX: Bool = True) -> Callable",
                    "summary": "Jit and cache the given function or Callable."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "fn(List[Array]) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "",
                        "kind": "argument",
                        "name": "compile_with_MAX",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jit",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jit(arg: fn(List[Array]) raises -> Array, compile_with_MAX: Bool = True) -> Callable",
                    "summary": "Jit and cache the given function or Callable."
                  },
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "fn(Array) raises -> Array"
                      },
                      {
                        "convention": "read",
                        "default": "True",
                        "description": "",
                        "kind": "argument",
                        "name": "compile_with_MAX",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "jit",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Callable",
                    "returnsDoc": "",
                    "signature": "jit(arg: fn(Array) raises -> Array, compile_with_MAX: Bool = True) -> Callable",
                    "summary": "Jit and cache the given function or Callable."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "functional",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "top_order_subgraph_rec",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "trace",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "top_order_subgraph_rec",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "top_order_subgraph_rec(mut curr: Array, mut trace: List[Array])",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "fx",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "traversing_arrays",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "inputs",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "outputs",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "max_model",
                    "summary": "",
                    "type": "List[ArcPointer[Model]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "compile_with_MAX",
                    "summary": "",
                    "type": "Bool"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "compile_with_MAX",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "List()",
                            "description": "",
                            "kind": "argument",
                            "name": "traversing_arrays",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, compile_with_MAX: Bool, traversing_arrays: List[Array] = List())",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(out self, other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(out self, owned other: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "append",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arr",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "append",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "append(mut self, arr: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "setup_inputs_and_outputs",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "setup_inputs_and_outputs",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "setup_inputs_and_outputs(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "execute",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "execute",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "execute(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "print",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "print",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "print(self)",
                        "summary": "Print the subgraph in a human readable table like format. It will show the flow of the computation from the top to the bottom, and also will show the direct dependencies (args) and other metadata such as the shape, stride, storage_offset and the requires_grad flag."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "IR",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "IR",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "IR(self) -> String",
                        "summary": "Get an IR like code representation of the subgraph. As of right perf_counter this has perf_counter real functionality, but eventually this IR string should become a valid MLIR code representation of the subgraph, which can be compiled and optimized by the MLIR."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "FxSubgraph",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "FxSubgraph represents a functionally pure subgraph within a larger computation graph. It facilitates optimization and efficient execution of subgraphs by caching and reusing optimized computations."
              },
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "array_in_graph",
                    "summary": "",
                    "type": "Array"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "name",
                    "summary": "",
                    "type": "String"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "branch_to_idx",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "is_breakpoint",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "dependencies",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "sub_graph",
                    "summary": "",
                    "type": "List[ArcPointer[FxSubgraph]]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "tmp_id_in_subgraph",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "jvp_derivatives",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "is_computed",
                    "summary": "",
                    "type": "Bool"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "id",
                    "summary": "",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "name",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "branch_to_idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "array_in_graph",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, name: String, branch_to_idx: Int, array_in_graph: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "print",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"\")",
                            "description": "",
                            "kind": "argument",
                            "name": "storage_offset",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "print",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "print(self, storage_offset: String = String(\"\"))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "subgraph",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "subgraph",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "FxSubgraph",
                        "returnsDoc": "",
                        "signature": "subgraph(self) -> FxSubgraph",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "FxGraphNode",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "FxGraphNode is a lightweight dual representation of an Array (or Node) within a traced function. It serves as a bookkeeping structure to facilitate tracing, caching, and optimization of computation graphs."
              },
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "trace",
                    "summary": "",
                    "type": "List[FxGraphNode]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "curr_idx",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "postponed_outputs",
                    "summary": "",
                    "type": "List[Int]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "compile_with_MAX",
                    "summary": "",
                    "type": "Bool"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "compile_with_MAX",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, compile_with_MAX: Bool)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "op_array",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arr",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "op_array",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "op_array(mut self, mut arr: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "reset_data_and_shapes_to_uncomputed",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reset_data_and_shapes_to_uncomputed",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "reset_data_and_shapes_to_uncomputed(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "setup_grads",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "setup_grads",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "setup_grads(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zero_data",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "zero_data",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "zero_data(mut self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "subgraph",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "compile_with_MAX",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "subgraph",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "ArcPointer[FxSubgraph]",
                        "returnsDoc": "",
                        "signature": "subgraph(mut self, compile_with_MAX: Bool) -> ArcPointer[FxSubgraph]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "FxGraph",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": "FxGraph is a data structure that holds the traced operations and computation graph of a function. It facilitates Just-In-Time (JIT) compilation, optimization, and caching of subgraphs within the computation graph."
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "tensor_to_array",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "",
                        "kind": "argument",
                        "name": "src",
                        "passingKind": "pos_or_kw",
                        "type": "Tensor[float32]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tensor_to_array",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "tensor_to_array(owned src: Tensor[float32]) -> Array",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "top_order",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "top_order",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "top_order(mut curr: Array) -> List[Array]",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "to_tensor",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_tensor",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Tensor[float32]",
                    "returnsDoc": "",
                    "signature": "to_tensor(arg: Array) -> Tensor[float32]",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "make_equal_rank",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Symbol"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg_shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "comp_shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "make_equal_rank",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Symbol",
                    "returnsDoc": "",
                    "signature": "make_equal_rank(arg: Symbol, arg_shape: List[Int], comp_shape: List[Int]) -> Symbol",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "build_graph",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "outputs",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "trace",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": true,
                    "isStatic": false,
                    "kind": "function",
                    "name": "build_graph",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Graph",
                    "returnsDoc": "",
                    "signature": "build_graph(args: List[Array], outputs: List[Array], trace: List[Array]) -> Graph",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "build_model",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "outputs",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "trace",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "build_model",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Model",
                    "returnsDoc": "",
                    "signature": "build_model(args: List[Array], outputs: List[Array], trace: List[Array]) -> Model",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "execute_model",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "args",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "outputs",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "model",
                        "passingKind": "pos_or_kw",
                        "type": "Model"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": true,
                    "isStatic": false,
                    "kind": "function",
                    "name": "execute_model",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "List[Array]",
                    "returnsDoc": "",
                    "signature": "execute_model(args: List[Array], outputs: List[Array], model: Model) -> List[Array]",
                    "summary": "Execution of a model with MAX JIT compilation. No data copying, only temporary pointer borrowing for inputs and ownership stealing for outputs."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "max_utils",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "compile",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "functional",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "add",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = add(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "add",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The element-wise sum of arg0 and arg1.",
                        "signature": "add(arg0: Array, arg1: Array) -> Array",
                        "summary": "Adds two arrays element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "add_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The first input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The second input array.",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = add(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The element-wise sum of arg0 and arg1.",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": "Adds two arrays element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Tangent vectors.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements forward-mode automatic differentiation for addition.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\nadd_vjp: Reverse-mode autodiff for addition.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "Array: Jacobian-vector product.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Compute Jacobian-vector product for array addition."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for addition.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\nadd_jvp: Forward-mode autodiff for addition.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array addition."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "binary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The real part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "binary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the sum of the two complex numbers as a tuple.",
                            "signature": "binary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to add two complex numbers represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The two arrays to add.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The two arrays must have broadcastable shapes.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Adds two arrays element-wise and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up. If the shape and data of the current array (curr) is not set up, the function will compute the shape based on the shapes of the args and set up the data accordingly."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Add",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableBinaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "div",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = div([a, b])\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "div",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The element-wise division of the two input arrays.",
                        "signature": "div(arg0: Array, arg1: Array) -> Array",
                        "summary": "Divides two arrays element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "div_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The first input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The second input array.",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = div(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The element-wise division of arg0 and arg1.",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": "Divides two arrays element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Tangent vectors.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements forward-mode automatic differentiation for division.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\ndiv_vjp: Reverse-mode autodiff for division.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "Array: Jacobian-vector product.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Compute Jacobian-vector product for array division."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for division.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\ndiv_jvp: Forward-mode autodiff for division.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array division."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "binary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The real part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "binary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the division of the two complex numbers as a tuple.",
                            "signature": "binary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to divide two complex numbers represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The two arrays to divide.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The two arrays must have broadcastable shapes.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Divides two arrays element-wise and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up. If the shape and data of the current array (curr) is not set up, the function will compute the shape based on the shapes of the args and set up the data accordingly."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Div",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableBinaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "matmul_shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "The ArrayShape to store the result of the computation.",
                            "kind": "argument",
                            "name": "curr",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "description": "Lhs ArrayShape, rhs ArrayShape.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[ArrayShape]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Constraints:\n- The number of dimensions of the lhs ArrayShape and rhs ArrayShape must be greater than or equal to 2.\n- The last dimension of the lhs ArrayShape must be equal to the second-to-last dimension of the rhs ArrayShape.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_shape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "matmul_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                        "summary": "Computes the shape of the result of a batched matrix multiplication operation. Given a lhs Array Shape (_,M,K) and a rhs Array Shape (_,K,N), the result will be (_,M,N). It also performs broadcasting on the two input shapes to make them compatible for matrix multiplication."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_fwd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "The current array, must be mutable.",
                            "kind": "argument",
                            "name": "curr",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The two arrays to multiply.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "The shapes of the two arrays must be compatible for matrix multiplication, i.e. the last dimension of the first array must be equal to the second last dimension of the second array.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_fwd",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "matmul_fwd(mut curr: Array, args: List[Array])",
                        "summary": "Perfomr batched matrix multiplication between two arrays and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_vjp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Primal input arrays.",
                            "kind": "argument",
                            "name": "primals",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "description": "Gradient of the output with respect to some scalar function.",
                            "kind": "argument",
                            "name": "grad",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The output of the forward pass.",
                            "kind": "argument",
                            "name": "out",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nImplements reverse-mode automatic differentiation for batched matrix multiplication.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\nfwd: Forward-mode autodiff for batched matrix multiplication.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_vjp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Array]",
                        "returnsDoc": "List[Array]: Gradients with respect to each input.",
                        "signature": "matmul_vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                        "summary": "Compute vector-Jacobian product for batched matrix multiplication."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_jvp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Primal input arrays.",
                            "kind": "argument",
                            "name": "primals",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "description": "Tangent vectors.",
                            "kind": "argument",
                            "name": "tangents",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nImplements forward-mode automatic differentiation for batched matrix multiplication.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\nvjp: Reverse-mode autodiff for batched matrix multiplication.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_jvp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Array: Jacobian-vector product.",
                        "signature": "matmul_jvp(primals: List[Array], tangents: List[Array]) -> Array",
                        "summary": "Compute Jacobian-vector product for batched matrix multiplication."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\n a = Array([[1, 2], [3, 4]])\n b = Array([[5, 6], [7, 8]])\n result = matmul(a, b)\n print(result)\n```\n\n#### Note:\nThe shapes of the two arrays must be compatible for matrix multiplication, i.e. the last dimension of the first array must be equal to the second last dimension of the second array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The result of the batched matrix multiplication.",
                        "signature": "matmul(arg0: Array, arg1: Array) -> Array",
                        "summary": "Perform batched matrix multiplication between two arrays."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "matmul_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "mul",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = mul(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mul",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The element-wise product of arg0 and arg1.",
                        "signature": "mul(arg0: Array, arg1: Array) -> Array",
                        "summary": "Multiplies two arrays element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "mul_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The first input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The second input array.",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = mul(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The element-wise product of arg0 and arg1.",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": "Multiplies two arrays element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The two arrays to multiply.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The two arrays must have broadcastable shapes.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Multiplies two arrays element-wise and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up. If the shape and data of the current array (curr) is not set up, the function will compute the shape based on the shapes of the args and set up the data accordingly."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Tangent vectors.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements forward-mode automatic differentiation for multiplication.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\nmul_vjp: Reverse-mode autodiff for multiplication.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "Array: Jacobian-vector product.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Compute Jacobian-vector product for array multiplication."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for multiplication.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\nmul_jvp: Forward-mode autodiff for multiplication.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array multiplication."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "binary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The real part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "binary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the product of the two complex numbers as a tuple.",
                            "signature": "binary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to multiply two complex numbers represented as SIMD vectors."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Mul",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableBinaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "pow_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = pow(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "pow_to",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The element-wise result of raising arg0 to the power of arg1.",
                        "signature": "pow_to(arg0: Array, arg1: Array) -> Array",
                        "summary": "Raises the first array to the power of the second array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "pow_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The first input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The second input array.",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = pow_to(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The element-wise result of raising arg0 to the power of arg1.",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": "Raises the first array to the power of the second array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Tangent vectors.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements forward-mode automatic differentiation for exponentiation.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\npow_vjp: Reverse-mode autodiff for exponentiation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "Array: Jacobian-vector product.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Compute Jacobian-vector product for array exponentiation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for exponentiation.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\npow_jvp: Forward-mode autodiff for exponentiation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array exponentiation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "binary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The real part of the power.",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the power.",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "binary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the complex number raised to the complex power as a tuple.",
                            "signature": "binary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to raise a complex number to a complex power represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The two arrays to raise to the power.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The two arrays must have broadcastable shapes.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Raises the first array to the power of the second array element-wise and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up. If the shape and data of the current array (curr) is not set up, the function will compute the shape based on the shapes of the args and set up the data accordingly."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Pow",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableBinaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sub",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The first input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The second input array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = sub(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sub",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The element-wise difference of arg0 and arg1.",
                        "signature": "sub(arg0: Array, arg1: Array) -> Array",
                        "summary": "Subtracts two arrays element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sub_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The first input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The second input array.",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nb = Array([[5, 6], [7, 8]])\nresult = sub(a, b)\nprint(result)\n```\n\n#### This function supports\n- Broadcasting.\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The element-wise difference of arg0 and arg1.",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": "Subtracts two arrays element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Tangent vectors.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements forward-mode automatic differentiation for subtraction.\nThe result represents how the output changes with respect to\ninfinitesimal changes in the inputs along the directions specified by the tangents.\n\n#### See Also:\nsub_vjp: Reverse-mode autodiff for subtraction.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "Array: Jacobian-vector product.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Compute Jacobian-vector product for array subtraction."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for subtraction.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\nsub_jvp: Forward-mode autodiff for subtraction.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array subtraction."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "binary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The real part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the first complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the second complex number.",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "binary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the difference of the two complex numbers as a tuple.",
                            "signature": "binary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to subtract two complex numbers represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The two arrays to subtract.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The two arrays must have broadcastable shapes.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Subtracts two arrays element-wise and stores the result in the current array (curr). The function assumes that the shape and data of the args are already set up. If the shape and data of the current array (curr) is not set up, the function will compute the shape based on the shapes of the args and set up the data accordingly."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Sub",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableBinaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "binary_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "equal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "equal(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "equal_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Equal",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "greater_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater_equal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "greater_equal(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "greater_equal_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "GreaterEqual",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "greater",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "greater",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "greater(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "greater_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Greater",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "less_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less_equal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "less_equal(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "less_equal_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "LessEqual",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "less",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "less",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "less(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "less_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Less",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "not_equal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "not_equal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "not_equal(arg0: Array, arg1: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "not_equal_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, arg1: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "comparing_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg1_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "comparing_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "comparing_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg1_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "NotEqual",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "ComparisonOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "comparison_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "fft2",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List(-2, -1)",
                            "description": "The dimensions along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft2",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The 2-dimensional FFT of the input array.",
                        "signature": "fft2(x: Array, dims: List[Int] = List(-2, -1), norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the 2-dimensional FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "fft2_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "pi",
                    "summary": "",
                    "value": "SIMD(#kgen.float_literal<3141592653589793|1000000000000000>)"
                  }
                ],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cooley_tukey_non_recursive",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "max_depth",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "res_data",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[float64, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cooley_tukey_non_recursive",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "cooley_tukey_non_recursive(n: Int, max_depth: Int, res_data: UnsafePointer[SIMD[float64, 1]])",
                        "summary": "Non-recursive Cooley-Tukey FFT splitting of the input data with a limited depth."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cooley_tukey_sequencial_recombine",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "start_depth",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "res_data",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[float64, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cooley_tukey_sequencial_recombine",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "cooley_tukey_sequencial_recombine(n: Int, start_depth: Int, res_data: UnsafePointer[SIMD[float64, 1]])",
                        "summary": "Non-recursive Cooley-Tukey FFT recombination of the subsolutions. The recombination starts at a given depth."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fft_cooley_tukey_inplace_bit_reversal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "workload",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[float64, 1]]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "reordered_arr_data",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[uint32, 1]]"
                          },
                          {
                            "convention": "read",
                            "default": "List()",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft_cooley_tukey_inplace_bit_reversal",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "fft_cooley_tukey_inplace_bit_reversal(workload: Int, data: UnsafePointer[SIMD[float64, 1]], reordered_arr_data: UnsafePointer[SIMD[uint32, 1]], dims: List[Int] = List())",
                        "summary": "Iterative fast Fourier transform using the Cooley-Tukey algorithm with bit-reversal permutation inplace."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fft_cooley_tukey_parallel",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "input",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The dimensions along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "Optional(None)",
                            "description": "The output array (optional).",
                            "kind": "argument",
                            "name": "out",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[Array]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to conjugate the input data.",
                            "kind": "argument",
                            "name": "conj_input",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to conjugate the output data.",
                            "kind": "argument",
                            "name": "conj_output",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|1>)",
                            "description": "The divisor for the input data.",
                            "kind": "argument",
                            "name": "input_divisor",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|1>)",
                            "description": "The divisor for the output data.",
                            "kind": "argument",
                            "name": "output_divisor",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft_cooley_tukey_parallel",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The n-dimensional FFT/IFFT of the input array.",
                        "signature": "fft_cooley_tukey_parallel(input: Array, dims: List[Int], norm: String, out: Optional[Array] = Optional(None), conj_input: Bool = False, conj_output: Bool = False, input_divisor: SIMD[float64, 1] = SIMD(#kgen.float_literal<1|1>), output_divisor: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|1>)) -> Array",
                        "summary": "Compute the n-dimensional FFT using a hybrid version of the Cooley-Tukey algorithm."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fft_cooley_tukey_parallel_inplace",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "input",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "mut",
                            "description": "The output array.",
                            "kind": "argument",
                            "name": "out",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The dimensions along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to conjugate the input data.",
                            "kind": "argument",
                            "name": "conj_input",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "Whether to conjugate the output data.",
                            "kind": "argument",
                            "name": "conj_output",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|1>)",
                            "description": "The divisor for the input data.",
                            "kind": "argument",
                            "name": "input_divisor",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|1>)",
                            "description": "The divisor for the output data.",
                            "kind": "argument",
                            "name": "output_divisor",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft_cooley_tukey_parallel_inplace",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "fft_cooley_tukey_parallel_inplace(input: Array, mut out: Array, dims: List[Int], norm: String, conj_input: Bool = False, conj_output: Bool = False, input_divisor: SIMD[float64, 1] = SIMD(#kgen.float_literal<1|1>), output_divisor: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|1>))",
                        "summary": "Compute the n-dimensional FFT inplace using a hybrid version of the Cooley-Tukey algorithm."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "fft_cooley_tukey",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "fft",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "-1",
                            "description": "The dimension along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The n-dimensional FFT of the input array.",
                        "signature": "fft(x: Array, dim: Int = -1, norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the n-dimensional FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "fft_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "fftn",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List()",
                            "description": "The dimensions along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fftn",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The n-dimensional FFT of the input array.",
                        "signature": "fftn(x: Array, dims: List[Int] = List(), norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the n-dimensional FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "fftn_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "dims",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "norm",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, dims: List[Int], norm: String) -> Array",
                            "summary": "Sets up the Array object for the FFT operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the FFT function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the FFT function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Executes the FFT operation inplace."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "FFTN",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableFftOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "ifft2",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List(-2, -1)",
                            "description": "The dimensions along which to compute the inverse FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ifft2",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The 2-dimensional inverse FFT of the input array.",
                        "signature": "ifft2(x: Array, dims: List[Int] = List(-2, -1), norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the 2-dimensional inverse FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "ifft2_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "ifft",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "-1",
                            "description": "The dimension along which to compute the inverse FFT.",
                            "kind": "argument",
                            "name": "dim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ifft",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The n-dimensional inverse FFT of the input array.",
                        "signature": "ifft(x: Array, dim: Int = -1, norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the n-dimensional inverse FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "ifft_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "ifftn",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List()",
                            "description": "The dimensions along which to compute the FFT.",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "String(\"backward\")",
                            "description": "The normalization mode.",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ifftn",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The n-dimensional FFT of the input array.",
                        "signature": "ifftn(x: Array, dims: List[Int] = List(), norm: String = String(\"backward\")) -> Array",
                        "summary": "Compute the n-dimensional inverse FFT."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "ifftn_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "dims",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "norm",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, dims: List[Int], norm: String) -> Array",
                            "summary": "Sets up the Array object for the inverse FFT operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the inverse FFT function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the inverse FFT function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Executes the inverse FFT operation inplace."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "IFFTN",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableFftOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "pi",
                    "summary": "",
                    "value": "SIMD(#kgen.float_literal<3141592653589793|1000000000000000>)"
                  }
                ],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reverse_bits_simd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[uint32, nelts[::DType]()]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reverse_bits_simd",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[uint32, nelts[::DType]()]",
                        "returnsDoc": "",
                        "signature": "reverse_bits_simd(x: SIMD[uint32, nelts[::DType]()]) -> SIMD[uint32, nelts[::DType]()]",
                        "summary": "Reverse the bits of a 32-bit integer."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "bit_reversal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "reordered_arr_data",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[uint32, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "bit_reversal",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "bit_reversal(n: Int, reordered_arr_data: UnsafePointer[SIMD[uint32, 1]])",
                        "summary": "Generate a bit reversal permutation for integers from 0 to n-1. Works for any positive integer n."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "copy_complex_and_cast",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dst",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[dst_type, 1]]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "src",
                            "passingKind": "pos_or_kw",
                            "type": "UnsafePointer[SIMD[src_type, 1]]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "conjugate_and_divide",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "divisor",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dst_type, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "copy_complex_and_cast",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dst_type",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "src_type",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "copy_complex_and_cast[dst_type: DType, src_type: DType](dst: UnsafePointer[SIMD[dst_type, 1]], src: UnsafePointer[SIMD[src_type, 1]], size: Int, conjugate_and_divide: Bool = False, divisor: SIMD[dst_type, 1] = SIMD(1))",
                        "summary": "Copy complex data from one buffer to another and cast the data to a different type. Optionally conjugate and divide by a scalar (usefule for inverse FFT)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_workload",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "divisions",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "num_workers",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_workload",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "get_workload(n: Int, divisions: Int, num_workers: Int) -> Int",
                        "summary": "Calculate the workload size for each worker."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "list_swap",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "i",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "j",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "list_swap",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "list_swap(arg: List[Int], i: Int, j: Int) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "determine_num_workers",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "determine_num_workers",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "determine_num_workers(size: Int) -> Int",
                        "summary": "Determine the number of workers to use for parallelization."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fft_op_array",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "name",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "fwd",
                            "passingKind": "pos_or_kw",
                            "type": "fn(mut Array, List[Array]) raises -> None"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "jvp",
                            "passingKind": "pos_or_kw",
                            "type": "fn(List[Array], List[Array]) raises -> Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "vjp",
                            "passingKind": "pos_or_kw",
                            "type": "fn(List[Array], Array, Array) raises -> List[Array]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fft_op_array",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "fft_op_array(arg0: Array, name: String, fwd: fn(mut Array, List[Array]) raises -> None, jvp: fn(List[Array], List[Array]) raises -> Array, vjp: fn(List[Array], Array, Array) raises -> List[Array], dims: List[Int], norm: String) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "encode_fft_params",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "norm",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "encode_fft_params",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "encode_fft_params(dims: List[Int], norm: String) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_dims_from_encoded_params",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_dims_from_encoded_params",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Int]",
                        "returnsDoc": "",
                        "signature": "get_dims_from_encoded_params(params: List[Int]) -> List[Int]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_norm_from_encoded_params",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_norm_from_encoded_params",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "String",
                        "returnsDoc": "",
                        "signature": "get_norm_from_encoded_params(params: List[Int]) -> String",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "utils",
                "structs": [],
                "summary": "",
                "traits": [
                  {
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "dims",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "norm",
                                "passingKind": "pos_or_kw",
                                "type": "String"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, dims: List[Int], norm: String) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "trait",
                    "name": "DifferentiableFftOp",
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ]
              }
            ],
            "name": "fft_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "concat_shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "The ArrayShape to store the result of the computation.",
                            "kind": "argument",
                            "name": "curr",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "description": "The ArrayShapes to concatenate, and the axis to concatenate along encoded in an ArrayShape.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[ArrayShape]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "concat_shape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "concat_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                        "summary": "Computes the shape of an array after concatenation."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "concat_fwd",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "The current array to store the result (modified in-place).",
                            "kind": "argument",
                            "name": "curr",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The arrays to concatenate.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "concat_fwd",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "concat_fwd(mut curr: Array, args: List[Array])",
                        "summary": "Performs the forward pass for the concat operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "concat_vjp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "A list containing the primal input arrays.",
                            "kind": "argument",
                            "name": "primals",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "description": "The gradient of the output with respect to some scalar function.",
                            "kind": "argument",
                            "name": "grad",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The output of the forward pass.",
                            "kind": "argument",
                            "name": "out",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThe vector-Jacobian product for concat is computed by returning an empty list.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "concat_vjp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "List[Array]",
                        "returnsDoc": "A list containing the gradients with respect to the input arrays.",
                        "signature": "concat_vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                        "summary": "Computes the vector-Jacobian product for the concat operation."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "concat",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The arrays to concatenate.",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to concatenate.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "concat",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The concatenated array.",
                        "signature": "concat(args: List[Array], axis: Int) -> Array",
                        "summary": "Concatenates the input arrays along the given axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "concat_op",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "index_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "array",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "array",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "array(dims: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arr_str",
                            "passingKind": "pos_or_kw",
                            "type": "StringLiteral"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "array",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "array(arr_str: StringLiteral, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "tensor",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tensor",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "tensor(dims: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arr_str",
                            "passingKind": "pos_or_kw",
                            "type": "StringLiteral"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tensor",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "tensor(arr_str: StringLiteral, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ndarray",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ndarray",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "ndarray(dims: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arr_str",
                            "passingKind": "pos_or_kw",
                            "type": "StringLiteral"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ndarray",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "ndarray(arr_str: StringLiteral, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "Tensor",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "Tensor",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "Tensor(dims: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arr_str",
                            "passingKind": "pos_or_kw",
                            "type": "StringLiteral"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "Tensor",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "Tensor(arr_str: StringLiteral, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arange_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arange_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "arange_(mut arg: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "linspace",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "start",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "end",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "50",
                            "description": "",
                            "kind": "argument",
                            "name": "num",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "linspace",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "linspace(start: SIMD[float32, 1] = SIMD(0), end: SIMD[float32, 1] = SIMD(1), num: Int = 50, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "arange",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "start",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "end",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "step",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "arange",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "arange(start: SIMD[float32, 1] = SIMD(0), end: SIMD[float32, 1] = SIMD(1), step: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zeros_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "zeros_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "zeros_(mut arg: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zeros",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "zeros",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "zeros(shape: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "zeros_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "zeros_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "zeros_like(arg: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ones_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ones_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "ones_(mut arg: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ones",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ones",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "ones(shape: List[Int], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "ones_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "ones_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "ones_like(arg: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "eye_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "eye_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "eye_(mut arg: Array)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "eye",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "n",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "eye",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "eye(n: Int, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "eye_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "eye_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "eye_like(arg: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "fill_(mut arg: Array, value: SIMD[float32, 1])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "full",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "full",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "full(shape: List[Int], value: SIMD[float32, 1], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "fill_like(arg: Array, value: SIMD[float32, 1]) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "indeces",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "storage_offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "indeces",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "indeces(shape: List[Int], stride: List[Int], storage_offset: Int, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randu_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "min",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "max",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randu_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "randu_(mut arg: Array, min: SIMD[float32, 1] = SIMD(0), max: SIMD[float32, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randu",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "min",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "max",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randu",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randu(shape: List[Int], min: SIMD[float32, 1] = SIMD(0), max: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randu_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "min",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "max",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randu_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randu_like(mut arg: Array, min: SIMD[float32, 1] = SIMD(0), max: SIMD[float32, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randn_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "mean",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "std",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randn_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "randn_(mut arg: Array, mean: SIMD[float64, 1] = SIMD(0), std: SIMD[float64, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randn",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "mean",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "std",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randn",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randn(shape: List[Int], mean: SIMD[float64, 1] = SIMD(0), std: SIMD[float64, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randn_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "mean",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "std",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randn_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randn_like(mut arg: Array, mean: SIMD[float64, 1] = SIMD(0), std: SIMD[float64, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_normal_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_normal_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_he_normal_(mut arg: Array, fan_in: SIMD[float64, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_normal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_normal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_he_normal(shape: List[Int], fan_in: SIMD[float64, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_normal_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_normal_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_he_normal_like(arg: Array, fan_in: SIMD[float64, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_uniform_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_uniform_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_he_uniform_(mut arg: Array, fan_in: SIMD[float32, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_uniform",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_uniform",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_he_uniform(shape: List[Int], fan_in: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_he_uniform_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_he_uniform_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_he_uniform_like(arg: Array, fan_in: SIMD[float32, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_normal_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_normal_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_xavier_normal_(mut arg: Array, fan_in: SIMD[float64, 1] = SIMD(1), fan_out: SIMD[float64, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_normal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_normal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_xavier_normal(shape: List[Int], fan_in: SIMD[float64, 1] = SIMD(1), fan_out: SIMD[float64, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_normal_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_normal_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_xavier_normal_like(mut arg: Array, fan_in: SIMD[float64, 1] = SIMD(1), fan_out: SIMD[float64, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_uniform_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_uniform_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_xavier_uniform_(mut arg: Array, fan_in: SIMD[float32, 1] = SIMD(1), fan_out: SIMD[float32, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_uniform",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_uniform",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_xavier_uniform(shape: List[Int], fan_in: SIMD[float32, 1] = SIMD(1), fan_out: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_xavier_uniform_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_out",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_xavier_uniform_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_xavier_uniform_like(mut arg: Array, fan_in: SIMD[float32, 1] = SIMD(1), fan_out: SIMD[float32, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_normal_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_normal_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_lecun_normal_(mut arg: Array, fan_in: SIMD[float64, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_normal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_normal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_lecun_normal(shape: List[Int], fan_in: SIMD[float64, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_normal_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_normal_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_lecun_normal_like(mut arg: Array, fan_in: SIMD[float64, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_uniform_",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_uniform_",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "rand_lecun_uniform_(mut arg: Array, fan_in: SIMD[float32, 1] = SIMD(1))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_uniform",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_uniform",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_lecun_uniform(shape: List[Int], fan_in: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rand_lecun_uniform_like",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "arg",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "fan_in",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rand_lecun_uniform_like",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "rand_lecun_uniform_like(mut arg: Array, fan_in: SIMD[float32, 1] = SIMD(1)) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "real",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "imag",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "complex",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "complex(real: Array, imag: Array, requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randn_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "mean",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "std",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float64, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randn_complex",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randn_complex(shape: List[Int], mean: SIMD[float64, 1] = SIMD(0), std: SIMD[float64, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "randu_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "min",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(1)",
                            "description": "",
                            "kind": "argument",
                            "name": "max",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "randu_complex",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "randu_complex(shape: List[Int], min: SIMD[float32, 1] = SIMD(0), max: SIMD[float32, 1] = SIMD(1), requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill_complex",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value_real",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "value_imag",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "",
                            "kind": "argument",
                            "name": "requires_grad",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill_complex",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "fill_complex(shape: List[Int], value_real: SIMD[float32, 1], value_imag: SIMD[float32, 1], requires_grad: Bool = False) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "init_ops",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "init_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "mse",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "pred",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "target",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mse",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "mse(pred: Array, target: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "mse_op",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "loss_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axes along which to compute the mean.",
                            "kind": "argument",
                            "name": "axes",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, the reduced axes are retained in the output array.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = mean(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the mean of the input array along the specified axes.",
                        "signature": "mean(arg0: Array, axes: List[Int], keepdims: Bool = False) -> Array",
                        "summary": "Computes the mean of the input array along the specified axes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "mean_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\n a = Array([[1, 2], [3, 4]])\n result = prod(a)\n print(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the prod of the input array along all axes.",
                        "signature": "prod(arg0: Array) -> Array",
                        "summary": "Computes the prod of the input array along all axes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "prod_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_add",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_add(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_add",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_add(arg0: Array, axis: List[Int]) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_add_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise addition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the addition function.\n\n#### Note:\nThe vector-Jacobian product for the addition is computed as the gradient itself.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the addition function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_add(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceAdd",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_argmax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, retains the reduced dimensions with length 1.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_argmax(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_argmax",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_argmax(arg0: Array, axis: List[Int], keepdims: Bool = False) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_argmax_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise arg_maxition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_argmax(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceArgMax",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_argmin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, retains the reduced dimensions with length 1.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_argmin(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_argmin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_argmin(arg0: Array, axis: List[Int], keepdims: Bool = False) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_argmin_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise arg_minition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_argmin(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceArgMin",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, retains the reduced dimensions with length 1.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_max(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_max",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_max(arg0: Array, axis: List[Int], keepdims: Bool = False) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_max_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise maxition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_max(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceMax",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, retains the reduced dimensions with length 1.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_min(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_min",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_min(arg0: Array, axis: List[Int], keepdims: Bool = False) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_min_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise minition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_min(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceMin",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reduce_mul",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis along which to reduce the array.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_mul(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reduce_mul",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                        "signature": "reduce_mul(arg0: Array, axis: List[Int]) -> Array",
                        "summary": "Reduces the input array along the specified axis by summing the elements."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reduce_mul_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reduce, and the axis to reduce along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The axis must be a valid axis of the ArrayShape (args[0]).\n- The number of axis must not exceed the number of dimensions of the ArrayShape (args[0]).",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reducing along a specific axis."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input arrays.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sum of the input arrays and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and the axis and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise mulition of two arrays."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the mulition function.\n\n#### Note:\nThe vector-Jacobian product for the mulition is computed as the gradient itself.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the mulition function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis along which to reduce the array.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reduce_mul(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sum of the input array along the specified axis.",
                            "signature": "fwd(arg0: Array, axis: List[Int]) -> Array",
                            "summary": "Reduces the input array along the specified axis by summing the elements."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ReduceMul",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableReduceOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "std",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List(0)",
                            "description": "The axes along which to compute the standard deviation.",
                            "kind": "argument",
                            "name": "axes",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "True",
                            "description": "If True, the standard deviation is computed using the unbiased estimator.",
                            "kind": "argument",
                            "name": "unbiased",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, the reduced axes are kept in the result.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = std(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "std",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the standard deviation of the input array along the specified axes.",
                        "signature": "std(arg0: Array, axes: List[Int] = List(0), unbiased: Bool = True, keepdims: Bool = False) -> Array",
                        "summary": "Computes the standard deviation of the input array along the specified axes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "std_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\n a = Array([[1, 2], [3, 4]])\n result = sum(a)\n print(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sum of the input array along all axes.",
                        "signature": "sum(arg0: Array) -> Array",
                        "summary": "Computes the sum of the input array along all axes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sum_op",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "variance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List(0)",
                            "description": "The axes along which to compute the variance.",
                            "kind": "argument",
                            "name": "axes",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "default": "True",
                            "description": "If True, the variance is computed using the unbiased estimator.",
                            "kind": "argument",
                            "name": "unbiased",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "read",
                            "default": "False",
                            "description": "If True, the reduced axes are kept in the result.",
                            "kind": "argument",
                            "name": "keepdims",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = variance(a, List(0))\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": true,
                        "isStatic": false,
                        "kind": "function",
                        "name": "variance",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the variance of the input array along the specified axes.",
                        "signature": "variance(arg0: Array, axes: List[Int] = List(0), unbiased: Bool = True, keepdims: Bool = False) -> Array",
                        "summary": "Computes the variance of the input array along the specified axes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "variance_op",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "reduce_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "avg_pool1d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the kernel.",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "The stride of the pooling operation. Defaults to 1.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "The padding to apply to the input. Defaults to 0.",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "The dilation to apply to the input. Defaults to 1.",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "avg_pool1d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Array: The output array.",
                        "signature": "avg_pool1d(arg0: Array, kernel_size: Int, stride: Int = 1, padding: Int = 0, dilation: Int = 1) -> Array",
                        "summary": "Applies a 1D average pooling operation over an input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "avg_pool1d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 1-dimensional average pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "0",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Int, stride: Int = 1, padding: Int = 0, dilation: Int = 1) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "AvgPool1d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 1D average pooling operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "avg_pool2d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the kernel (height, width).",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The stride of the pooling operation. Defaults to (1, 1).",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "The padding to apply to the input. Defaults to (0, 0).",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The dilation to apply to the input. Defaults to (1, 1).",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "avg_pool2d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Array: The output array.",
                        "signature": "avg_pool2d(arg0: Array, kernel_size: Tuple[Int, Int], stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                        "summary": "Applies a 2D average pooling operation over an input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "avg_pool2d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 2-dimensional average pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Tuple[Int, Int], stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "AvgPool2d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 2D average pooling operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "avg_pool3d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the kernel (depth, height, width).",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The stride of the pooling operation. Defaults to (1, 1, 1).",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "The padding to apply to the input. Defaults to (0, 0, 0).",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The dilation to apply to the input. Defaults to (1, 1, 1).",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "avg_pool3d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Array: The output array.",
                        "signature": "avg_pool3d(arg0: Array, kernel_size: Tuple[Int, Int, Int], stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                        "summary": "Applies a 3D average pooling operation over an input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "avg_pool3d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 3-dimensional average pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Tuple[Int, Int, Int], stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "AvgPool3d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 3D average pooling operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "conv1d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Input tensor of shape (batch_size, in_channels, length).",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "Convolution kernel of shape (out_channels, in_channels // groups, kernel_size).",
                            "kind": "argument",
                            "name": "kernel",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "Bias tensor of shape (out_channels).",
                            "kind": "argument",
                            "name": "bias",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "Stride of the convolution.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Zero-padding added to both sides of the input.",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Spacing between kernel elements.",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "Number of blocked connections from input channels to output channels.",
                            "kind": "argument",
                            "name": "groups",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "conv1d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Output tensor of shape (batch_size, out_channels, output_length).",
                        "signature": "conv1d(arg0: Array, kernel: Array, bias: Array, stride: Int, padding: Int, dilation: Int, groups: Int) -> Array",
                        "summary": "Applies a 1D convolution over an input signal composed of several input planes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "conv1d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 1-dimensional convolution operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "bias",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "groups",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel: Array, bias: Array, stride: Int, padding: Int, dilation: Int, groups: Int) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Conv1d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 1D convolution operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "conv2d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "Input tensor of shape (batch_size, in_channels, height, width).",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "Convolution kernel of shape (out_channels, in_channels // groups, kernel_height, kernel_width).",
                            "kind": "argument",
                            "name": "kernel",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "Bias tensor of shape (out_channels).",
                            "kind": "argument",
                            "name": "bias",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "Stride of the convolution.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "Zero-padding added to both sides of the input.",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "Spacing between kernel elements.",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "Number of blocked connections from input channels to output channels.",
                            "kind": "argument",
                            "name": "groups",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "conv2d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Output tensor of shape (batch_size, out_channels, output_height, output_width).",
                        "signature": "conv2d(arg0: Array, kernel: Array, bias: Array, stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), groups: Int = 1) -> Array",
                        "summary": "Applies a 2D convolution over an input image composed of several input planes."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "conv2d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 2-dimensional convolution operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "bias",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "groups",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel: Array, bias: Array, stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), groups: Int = 1) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Conv2d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 2D convolution operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "conv3d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The convolution kernel.",
                            "kind": "argument",
                            "name": "kernel",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The bias tensor.",
                            "kind": "argument",
                            "name": "bias",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The stride of the convolution operation. Defaults to (1, 1, 1).",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "The padding to apply to the input. Defaults to (0, 0, 0).",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The dilation to apply to the input. Defaults to (1, 1, 1).",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "The number of groups to split the input and output channels into. Defaults to 1.",
                            "kind": "argument",
                            "name": "groups",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "conv3d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "Array: The output array.",
                        "signature": "conv3d(arg0: Array, kernel: Array, bias: Array, stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), groups: Int = 1) -> Array",
                        "summary": "Applies a 3D convolution operation over an input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "conv3d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The input ArrayShape, and the convolution parameters encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 3-dimensional convolution operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "bias",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "groups",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel: Array, bias: Array, stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), groups: Int = 1) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Conv3d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 3D convolution operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "conv_transpose1d",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "conv_transpose2d",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "conv_transpose3d",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "flip",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "default": "List(-1)",
                            "description": "",
                            "kind": "argument",
                            "name": "dims",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "flip",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "flip(arg0: Array, dims: List[Int] = List(-1)) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "flip_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "dims",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, dims: List[Int]) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Flip",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "max_pool1d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input tensor.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the pooling kernel.",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "The stride of the pooling operation.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "0",
                            "description": "The padding to apply to the input tensor.",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "1",
                            "description": "The dilation to apply to the input tensor.",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max_pool1d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The result of the 1-dimensional max pooling operation.",
                        "signature": "max_pool1d(arg0: Array, kernel_size: Int, stride: Int = 1, padding: Int = 0, dilation: Int = 1) -> Array",
                        "summary": "Computes the 1-dimensional max pooling operation with dilation."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "max_pool1d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The input ArrayShape, and the pooling parameters encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 1-dimensional max pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "0",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              },
                              {
                                "convention": "read",
                                "default": "1",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Int, stride: Int = 1, padding: Int = 0, dilation: Int = 1) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "MaxPool1d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "max_pool2d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input tensor.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the window to take a max over.",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The stride of the window. Default is (1, 1).",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "The padding to apply to the input tensor. Default is (0, 0).",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The dilation to apply to the input tensor. Default is (1, 1).",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max_pool2d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The output tensor.",
                        "signature": "max_pool2d(arg0: Array, kernel_size: Tuple[Int, Int], stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                        "summary": "Applies a 2D max pooling operation over an input tensor."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "max_pool2d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The input ArrayShape, and the pooling parameters encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 2-dimensional max pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Tuple[Int, Int], stride: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "MaxPool2d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 2D max pooling operations."
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "max_pool3d",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input tensor.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The size of the pooling kernel.",
                            "kind": "argument",
                            "name": "kernel_size",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The stride of the pooling operation.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                            "description": "The padding to apply to the input tensor.",
                            "kind": "argument",
                            "name": "padding",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          },
                          {
                            "convention": "read",
                            "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                            "description": "The dilation to apply to the input tensor.",
                            "kind": "argument",
                            "name": "dilation",
                            "passingKind": "pos_or_kw",
                            "type": "Tuple[Int, Int, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max_pool3d",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The result of the 3D max pooling operation.",
                        "signature": "max_pool3d(arg0: Array, kernel_size: Tuple[Int, Int, Int], stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                        "summary": "Applies a 3D max pooling operation over an input tensor."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "max_pool3d_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The input ArrayShape, and the pooling parameters encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after a 3-dimensional max pooling operation with dilation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "kernel_size",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "padding",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              },
                              {
                                "convention": "read",
                                "default": "Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))",
                                "description": "",
                                "kind": "argument",
                                "name": "dilation",
                                "passingKind": "pos_or_kw",
                                "type": "Tuple[Int, Int, Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array, kernel_size: Tuple[Int, Int, Int], stride: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True)), padding: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({0}), store_to_mem({0}), store_to_mem({0})>, True)), dilation: Tuple[Int, Int, Int] = Tuple(VariadicPack(<store_to_mem({1}), store_to_mem({1}), store_to_mem({1})>, True))) -> Array",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "MaxPool3d",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": "Namespace for 3D max pooling operations."
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "spacial_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "to_abs",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = to_abs(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_abs",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the absolute value of each element in the input array.",
                        "signature": "to_abs(arg0: Array) -> Array",
                        "summary": "Computes the absolute value of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "abs_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = to_abs(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the absolute value of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the absolute value of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the absolute value function.\n\n#### Note:\nThe Jacobian-vector product for the absolute value is computed as sign(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the absolute value function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the absolute value function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the absolute value function.\n\n#### Note:\nThe vector-Jacobian product for the absolute value is computed as sign(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the absolute value function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the absolute value of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the absolute value of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the absolute value of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise absolute value computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Abs",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "acos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = acos(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "acos",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the arccosine of each element in the input array.",
                        "signature": "acos(arg0: Array) -> Array",
                        "summary": "Computes the arccosine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "acos_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = acos(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the arccosine of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the arccosine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the arccosine function.\n\n#### Note:\nThe Jacobian-vector product for arccosine is computed as -1 / sqrt(1 - x^2) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the arccosine function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the arccosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the arccosine function.\n\n#### Note:\nThe vector-Jacobian product for arccosine is computed as -1 / sqrt(1 - x^2) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the arccosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the arccosine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the arccosine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the arccosine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise arccosine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ACos",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "asin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = asin(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "asin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the arcsine of each element in the input array.",
                        "signature": "asin(arg0: Array) -> Array",
                        "summary": "Computes the arcsine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "asin_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = asin(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the arcsine of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the arcsine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the arcsine function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the arcsine function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the arcsine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the arcsine function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the arcsine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the arcsine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the arcsine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the arcsine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise arcsine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ASin",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "atan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = atan(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "atan",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the ArcPointertangent of each element in the input array.",
                        "signature": "atan(arg0: Array) -> Array",
                        "summary": "Computes the ArcPointertangent of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "atan_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = atan(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the ArcPointertangent of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the ArcPointertangent of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the ArcPointertangent function.\n\n#### Note:\nThe Jacobian-vector product for the ArcPointertangent is computed as 1 / (1 + x^2) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the ArcPointertangent function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the ArcPointertangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the ArcPointertangent function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the ArcPointertangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the ArcPointertangent of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the ArcPointertangent of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the ArcPointertangent of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise ArcPointertangent computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ATan",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "conj",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "conj",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "conj(arg0: Array) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "conj_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Conj",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cos",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = cos(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cos",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the cosine of each element in the input array.",
                        "signature": "cos(arg0: Array) -> Array",
                        "summary": "Computes the cosine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "cos_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = cos(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the cosine of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the cosine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the cosine function.\n\n#### Note:\nThe Jacobian-vector product for cosine is computed as -sin(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the cosine function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the cosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the cosine function.\n\n#### Note:\nThe vector-Jacobian product for cosine is computed as -sin(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the cosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the cosine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the cosine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the cosine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise cosine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Cos",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cosh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cosh",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the hyperbolic cosine of each element in the input array.  #### Examples: ```python a = Array([[1, 2], [3, 4]]) result = cosh(a) print(result) ```  #### Note: This function supports: - Automatic differentiation (forward and reverse modes). - Complex valued arguments.",
                        "signature": "cosh(arg0: Array) -> Array",
                        "summary": "Computes the hyperbolic cosine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "cosh_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the hyperbolic cosine of each element in the input array.  #### Examples: ```python a = Array([[1, 2], [3, 4]]) result = cosh(a) print(result) ```  #### Note: This function supports: - Automatic differentiation (forward and reverse modes). - Complex valued arguments.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the hyperbolic cosine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the hyperbolic cosine function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the hyperbolic cosine function.  #### Note: The Jacobian-vector product for hyperbolic cosine is computed as sinh(x) * dx, where x is the primal input and dx is the tangent vector.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the hyperbolic cosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the hyperbolic cosine function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.  #### Note: The vector-Jacobian product for hyperbolic cosine is computed as sinh(x) * grad, where x is the primal input and grad is the incoming gradient.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the hyperbolic cosine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the hyperbolic cosine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the hyperbolic cosine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the hyperbolic cosine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise hyperbolic cosine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "CosH",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "exp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = exp(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "exp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the exponential of each element in the input array.",
                        "signature": "exp(arg0: Array) -> Array",
                        "summary": "Computes the exponential of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "exp_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = exp(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the exponential of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the exponential of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the exponential function.\n\n#### Note:\nThe Jacobian-vector product for the exponential is computed as exp(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the exponential function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the exponential function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the exponential function.\n\n#### Note:\nThe vector-Jacobian product for the exponential is computed as exp(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the exponential function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the exponential of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the exponential of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the exponential of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise exponential computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Exp",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "log",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = log(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "log",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the natural logarithm of each element in the input array.",
                        "signature": "log(arg0: Array) -> Array",
                        "summary": "Computes the natural logarithm of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "log_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = log(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the natural logarithm of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the natural logarithm of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the natural logarithm function.\n\n#### Note:\nThe Jacobian-vector product for the natural logarithm is computed as dx / x,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the natural logarithm function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the natural logarithm function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the natural logarithm function.\n\n#### Note:\nThe vector-Jacobian product for the natural logarithm is computed as grad / x,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the natural logarithm function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the natural logarithm of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the natural logarithm of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the natural logarithm of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise natural logarithm computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Log",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "neg",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = neg(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "neg",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the negation of each element in the input array.",
                        "signature": "neg(arg0: Array) -> Array",
                        "summary": "Computes the negation of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "neg_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = neg(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the negation of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the negation of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the negation function.\n\n#### Note:\nThe Jacobian-vector product for negation is computed as -dx,\nwhere dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the negation function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the negation function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the negation function.\n\n#### Note:\nThe vector-Jacobian product for negation is computed as -grad.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the negation function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the negation of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the negation of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the negation of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise negation computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Neg",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reciprocal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reciprocal(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reciprocal",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the reciprocal of each element in the input array.",
                        "signature": "reciprocal(arg0: Array) -> Array",
                        "summary": "Computes the reciprocal of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "reciprocal_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = reciprocal(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the reciprocal of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the reciprocal of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the reciprocal function.\n\n#### Note:\nThe Jacobian-vector product for the reciprocal is computed as -x^2 * dx / x^2,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the reciprocal function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the reciprocal function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the reciprocal function.\n\n#### Note:\nThe vector-Jacobian product for the reciprocal is computed as -grad / x^2,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the reciprocal function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the reciprocal of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the reciprocal of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the reciprocal of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise reciprocal computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Reciprocal",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "relu",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = relu(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "relu",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the ReLU of each element in the input array.",
                        "signature": "relu(arg0: Array) -> Array",
                        "summary": "Computes the rectified linear unit (ReLU) of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "relu_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = relu(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the ReLU of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the rectified linear unit (ReLU) of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the ReLU function.\n\n#### Note:\nThe Jacobian-vector product for ReLU is computed as ge_zero(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the ReLU function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the ReLU function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the ReLU function.\n\n#### Note:\nThe vector-Jacobian product for ReLU is computed as ge_zero(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the ReLU function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the ReLU of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the rectified linear unit (ReLU) of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the ReLU of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise ReLU computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Relu",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sigmoid",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sigmoid(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sigmoid",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sigmoid function of each element in the input array.",
                        "signature": "sigmoid(arg0: Array) -> Array",
                        "summary": "Computes the sigmoid function of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sigmoid_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sigmoid(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sigmoid function of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the sigmoid function of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the sigmoid function.\n\n#### Note:\nThe Jacobian-vector product for the sigmoid is computed as x * (1 - x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the sigmoid function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the sigmoid function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the sigmoid function.\n\n#### Note:\nThe vector-Jacobian product for the sigmoid is computed as x * (1 - x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the sigmoid function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the sigmoid function of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the sigmoid function of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sigmoid function of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise sigmoid function computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Sigmoid",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sign",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sign(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sign",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sign function of each element in the input array.",
                        "signature": "sign(arg0: Array) -> Array",
                        "summary": "Computes the sign function of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sign_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sign(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sign function of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the sign function of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the sign function of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the sign function of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sign function of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise sign function computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Sign",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sin(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sin",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the sine of each element in the input array.",
                        "signature": "sin(arg0: Array) -> Array",
                        "summary": "Computes the sine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sin_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sin(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the sine of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the sine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the sine function.\n\n#### Note:\nThe Jacobian-vector product for sine is computed as cos(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the sine function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the sine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the sine function.\n\n#### Note:\nThe vector-Jacobian product for sine is computed as cos(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the sine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the sine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the sine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the sine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise sine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Sin",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sinh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sinh(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sinh",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the hyperbolic sine of each element in the input array.",
                        "signature": "sinh(arg0: Array) -> Array",
                        "summary": "Computes the hyperbolic sine of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sinh_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sinh(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the hyperbolic sine of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the hyperbolic sine of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the hyperbolic sine function.\n\n#### Note:\nThe Jacobian-vector product for hyperbolic sine is computed as cosh(x) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the hyperbolic sine function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the hyperbolic sine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the hyperbolic sine function.\n\n#### Note:\nThe vector-Jacobian product for hyperbolic sine is computed as cosh(x) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the hyperbolic sine function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the hyperbolic sine of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the hyperbolic sine of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the hyperbolic sine of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise hyperbolic sine computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "SinH",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sqrt",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sqrt(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sqrt",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the square root of each element in the input array.",
                        "signature": "sqrt(arg0: Array) -> Array",
                        "summary": "Computes the square root of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "sqrt_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = sqrt(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the square root of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the square root of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the square root function.\n\n#### Note:\nThe Jacobian-vector product for the square root is computed as dx / (2 * sqrt(x)),\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the square root function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the square root function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the square root function.\n\n#### Note:\nThe vector-Jacobian product for the square root is computed as grad / (2 * sqrt(x)),\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the square root function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the square root of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the square root of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the square root of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise square root computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Sqrt",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "square",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = square(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "square",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the square of each element in the input array.",
                        "signature": "square(arg0: Array) -> Array",
                        "summary": "Computes the square of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "square_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = square(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the square of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the square of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the square function.\n\n#### Note:\nThe Jacobian-vector product for the square is computed as x * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the square function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the square function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the square function.\n\n#### Note:\nThe vector-Jacobian product for the square is computed as x * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the square function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the square of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the square of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the square of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise square computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Square",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "tan",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = tan(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tan",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the tangent of each element in the input array.",
                        "signature": "tan(arg0: Array) -> Array",
                        "summary": "Computes the tangent of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "tan_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = tan(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the tangent of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the tangent of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the tangent function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the tangent function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the tangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the tangent function.\n",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the tangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the tangent of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the tangent of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the tangent of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise tangent computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Tan",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "tanh",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = tanh(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tanh",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the hyperbolic tangent of each element in the input array.",
                        "signature": "tanh(arg0: Array) -> Array",
                        "summary": "Computes the hyperbolic tangent of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "tanh_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = tanh(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the hyperbolic tangent of each element in the input array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Computes the hyperbolic tangent of the input array element-wise."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the tangent vector.",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements forward-mode automatic differentiation for the hyperbolic tangent function.\n\n#### Note:\nThe Jacobian-vector product for the hyperbolic tangent is computed as (1 - tanh(x)^2) * dx,\nwhere x is the primal input and dx is the tangent vector.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The Jacobian-vector product for the hyperbolic tangent function.",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": "Computes the Jacobian-vector product for the hyperbolic tangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the hyperbolic tangent function.\n\n#### Note:\nThe vector-Jacobian product for the hyperbolic tangent is computed as (1 - tanh(x)^2) * grad,\nwhere x is the primal input and grad is the incoming gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the hyperbolic tangent function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "unary_simd_op",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The real part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_real",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              },
                              {
                                "convention": "read",
                                "description": "The imaginary part of the complex number.",
                                "kind": "argument",
                                "name": "arg0_imag",
                                "passingKind": "pos_or_kw",
                                "type": "SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "unary_simd_op",
                            "parameters": [],
                            "raises": false,
                            "raisesDoc": "",
                            "returnType": "Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "returnsDoc": "The real and imaginary parts of the hyperbolic tangent of the complex number as a tuple.",
                            "signature": "unary_simd_op(arg0_real: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], arg0_imag: SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]) -> Tuple[SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)], SIMD[float32, nelts[::DType]().__mul__(2).__floordiv__(2)]]",
                            "summary": "Low-level function to compute the hyperbolic tangent of a complex number represented as SIMD vectors."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Computes the hyperbolic tangent of each element in the input array and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the input array and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for element-wise hyperbolic tangent computation of an array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Tanh",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableUnaryOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "unary_ops",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "array_slice",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The slices to apply.",
                            "kind": "argument",
                            "name": "slices",
                            "passingKind": "pos_or_kw",
                            "type": "List[Slice]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "array_slice",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The sliced array.",
                        "signature": "array_slice(arg0: Array, slices: List[Slice]) -> Array",
                        "summary": "Slices the input array based on the given slices."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "array_slice_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to slice, and the list of slices encoded in an ArrayShape via the array_shape_to_slices function.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after slicing."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the slice view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the slice operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for slice is computed by padding the gradient with zeros along the axes that were sliced.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the slice operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The slices to apply.",
                                "kind": "argument",
                                "name": "slices",
                                "passingKind": "pos_or_kw",
                                "type": "List[Slice]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The sliced array.",
                            "signature": "fwd(arg0: Array, slices: List[Slice]) -> Array",
                            "summary": "Slices the input array based on the given slices."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ArraySlice",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "as_strided",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The shape of the view.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The stride of the view.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The storage offset of the view.",
                            "kind": "argument",
                            "name": "storage_offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "as_strided",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array with the given shape and stride.",
                        "signature": "as_strided(arg0: Array, shape: List[Int], stride: List[Int], storage_offset: Int) -> Array",
                        "summary": "Creates a view of the input array with the given shape and stride."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "as_strided_inv",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape of the view.",
                            "kind": "argument",
                            "name": "target_shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "description": "The shape of the view.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The stride of the view.",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "read",
                            "description": "The storage offset of the view.",
                            "kind": "argument",
                            "name": "storage_offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "as_strided_inv",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array with the given shape and stride.",
                        "signature": "as_strided_inv(arg0: Array, target_shape: ArrayShape, shape: List[Int], stride: List[Int], storage_offset: Int) -> Array",
                        "summary": "Creates a view of the input array with the given shape and stride."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "as_strided_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to stride, the shape, stride and storage offset of the target ArrayShape encoded in a  single ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after striding."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the as_strided view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the as_strided operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for as_strided is computed by calling the inverse operation as_strided_inv.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the as_strided operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The shape of the view.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "The stride of the view.",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "The storage offset of the view.",
                                "kind": "argument",
                                "name": "storage_offset",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array with the given shape and stride.",
                            "signature": "fwd(arg0: Array, shape: List[Int], stride: List[Int], storage_offset: Int) -> Array",
                            "summary": "Creates a view of the input array with the given shape and stride."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "AsStrided",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  },
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to stride, the shape, stride and storage offset of the target ArrayShape encoded in a  single ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after striding, in an inverse manner to the as_strided_shape function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the as_strided_inv view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the as_strided_inv operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for as_strided_inv is computed by calling the as_strided operation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the as_strided_inv operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The target shape of the view.",
                                "kind": "argument",
                                "name": "target_shape",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The shape of the view.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "The stride of the view.",
                                "kind": "argument",
                                "name": "stride",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "description": "The storage offset of the view.",
                                "kind": "argument",
                                "name": "storage_offset",
                                "passingKind": "pos_or_kw",
                                "type": "Int"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array with the given shape and stride.",
                            "signature": "fwd(arg0: Array, target_shape: ArrayShape, shape: List[Int], stride: List[Int], storage_offset: Int) -> Array",
                            "summary": "Creates a view of the input array with the given shape and stride."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "AsStridedInv",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "detach",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is non-differentiable.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "detach",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The detached array.",
                        "signature": "detach(arg0: Array) -> Array",
                        "summary": "Detaches the input array from the computation graph."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "detach_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to detach.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after detaching."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array to detach.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the detach operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThis function is non-differentiable.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The detached array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Detaches the input array from the computation graph."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Detach",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "expand",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "default": "List()",
                            "description": "The axes to ignore during expansion.",
                            "kind": "argument",
                            "name": "ignore_axes",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the expand function with the target shape being the shape of the target array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "expand",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The expanded array.",
                        "signature": "expand(arg0: Array, shape: ArrayShape, ignore_axes: List[Int] = List()) -> Array",
                        "summary": "Expands the input array to the given shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "expand_as",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target array.",
                            "kind": "argument",
                            "name": "arg1",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the expand function with the target shape being the shape of the target array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "expand_as",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view on the input array with the shape of the target array.",
                        "signature": "expand_as(arg0: Array, arg1: Array) -> Array",
                        "summary": "Expands the input array to the shape of the target array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "broadcast_to",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the expand function with the target shape being the shape of the target array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "broadcast_to",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view on the input array with the target shape.",
                        "signature": "broadcast_to(arg0: Array, shape: List[Int]) -> Array",
                        "summary": "Broadcasts the input array to the given shape."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "expand_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "Source ArrayShape, target ArrayShape, and axes to ignore during broadcasting.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The number of dimensions of the source ArrayShape must be less than or equal to the number of dimensions of the target ArrayShape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape resulting from broadcasting one array to another."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the expanded view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the expand operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for expand is computed by reducing the gradient along the axes that were expanded.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the expand operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The target shape.",
                                "kind": "argument",
                                "name": "array_shape",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "default": "List()",
                                "description": "The axes to ignore during expansion.",
                                "kind": "argument",
                                "name": "ignore_axes",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The number of dimensions of the source ArrayShape must be less than or equal to the number of dimensions of the target ArrayShape.\n- The number of axis to ignore must be less than or equal to the number of dimensions of the source ArrayShape.\n\n#### Note:\nWhen performing an expand operation in eager mode, the function checks if the shape of the input array is equal to the target shape. If they are equal, the function returns the input array as is. This is done to avoid unnecessary computation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The expanded array.",
                            "signature": "fwd(arg0: Array, array_shape: ArrayShape, ignore_axes: List[Int] = List()) -> Array",
                            "summary": "Expands the input array to the given shape."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Expand",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "imag",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = imag(a)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Complex input arrays.\n- Non-differentiable operation.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "imag",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the imaginary part of the input array.",
                        "signature": "imag(arg0: Array) -> Array",
                        "summary": "Computes the imaginary part of the input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "imag_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to compute the imaginary part of.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of the imaginary part of a complex array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the imag view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the imag operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThis function is non-differentiable.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array as an imaginary array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Creates a view of the input array as an imaginary array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Imag",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "pad",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array to be padded.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape to pad the input array to.",
                            "kind": "argument",
                            "name": "target_shape",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          },
                          {
                            "convention": "read",
                            "description": "A list of slices specifying the region in the target shape where the input array is copied.",
                            "kind": "argument",
                            "name": "slices_in_target",
                            "passingKind": "pos_or_kw",
                            "type": "List[Slice]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Pads the input array to the target shape by copying the input array to the target shape.\nThe target shape must be larger than the input array shape.\nThe slices in the target shape specify the region where the input array is copied.\n\n#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\ntarget_shape = ArrayShape([2, 3])\nslices_in_target = [Slice(0, 2), Slice(0, 2)]\nresult = pad(a, target_shape, slices_in_target)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (reverse mode only).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "pad",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "An array containing the input array padded to the target shape.",
                        "signature": "pad(arg0: Array, target_shape: ArrayShape, slices_in_target: List[Slice]) -> Array",
                        "summary": "Pads an array to a target shape."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "pad_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array to be padded.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The target shape to pad the input array to.",
                                "kind": "argument",
                                "name": "target_shape",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "A list of slices specifying the region in the target shape where the input array is copied.",
                                "kind": "argument",
                                "name": "slices_in_target",
                                "passingKind": "pos_or_kw",
                                "type": "List[Slice]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Pads the input array to the target shape by copying the input array to the target shape.\nThe target shape must be larger than the input array shape.\nThe slices in the target shape specify the region where the input array is copied.\n\n#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\ntarget_shape = ArrayShape([2, 3])\nslices_in_target = [Slice(0, 2), Slice(0, 2)]\nresult = pad(a, target_shape, slices_in_target)\nprint(result)\n```\n\n#### Note:\nThis function supports:\n- Automatic differentiation (reverse mode only).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "An array containing the input array padded to the target shape.",
                            "signature": "fwd(arg0: Array, target_shape: ArrayShape, slices_in_target: List[Slice]) -> Array",
                            "summary": "Pads an array to a target shape."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array and the target shape.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Implements reverse-mode automatic differentiation for the padding operation.\n\n#### Note:\nThe vector-Jacobian product for padding is computed as the gradient of the output array sliced to the target shape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the padding operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "padded_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to pad, the target ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "padded_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "padded_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after padding."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "A list containing the input array and the target shape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "Pads the input array to the target shape and stores the result in the current array.\nInitializes the current array if not already set up.\n\n#### Note:\nThis function assumes that the shape and data of the args are already set up.\nIf the current array (curr) is not initialized, it computes the shape based on the target shape and sets up the data accordingly.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for padding an array to a target shape."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Pad",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "permute",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis to permute.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\n a = Array([[1, 2], [3, 4]])\n result = permute(a, axis=List(-1,-2))\n print(result)\n```\n\n#### This function supports\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "permute",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array with its dimensions permuted.",
                        "signature": "permute(arg0: Array, axis: ArrayShape) -> Array",
                        "summary": "Creates a view of the input array with its dimensions permuted based on the given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "transpose",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The first axis to transpose.",
                            "kind": "argument",
                            "name": "axis1",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The second axis to transpose.",
                            "kind": "argument",
                            "name": "axis2",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the permute function with the given axes.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "transpose",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The transposed array.",
                        "signature": "transpose(arg0: Array, axis1: Int, axis2: Int) -> Array",
                        "summary": "Transposes the input array based on the given axes."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "swapaxes",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The first axis to swap.",
                            "kind": "argument",
                            "name": "axis1",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The second axis to swap.",
                            "kind": "argument",
                            "name": "axis2",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the transpose function with the given axes.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "swapaxes",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The array with the axes swapped.",
                        "signature": "swapaxes(arg0: Array, axis1: Int, axis2: Int) -> Array",
                        "summary": "Swaps the input array's axes based on the given axes."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "swapdims",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The first axis to swap.",
                            "kind": "argument",
                            "name": "axis1",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "The second axis to swap.",
                            "kind": "argument",
                            "name": "axis2",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the transpose function with the given axes.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "swapdims",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The array with the dimensions swapped.",
                        "signature": "swapdims(arg0: Array, axis1: Int, axis2: Int) -> Array",
                        "summary": "Swaps the input array's dimensions based on the given axes."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "permute_inv",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis to permute.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = permute_inv(a, axis=List(-1,-2))\nprint(result)\n```\n\n#### This function supports\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "permute_inv",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array with its dimensions permuted.",
                        "signature": "permute_inv(arg0: Array, axis: ArrayShape) -> Array",
                        "summary": "Creates a view of the input array with its dimensions permuted based on the given axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "permute_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to permute, and the list of axes to permute.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The number of axes in the list must not exceed the number of dimensions of the ArrayShape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Permutes the dimensions of an array shape given a list of axes."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The input array and the axis to permute.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The axis must be a valid permutation of the input array's dimensions.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Permutes the input array based on the given axis and stores the result in the current array (curr). The first agument is set as the base of the current array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for permutation.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\npermute_jvp: Forward-mode autodiff for permutation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array permutation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis to permute.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array with its dimensions permuted.",
                            "signature": "fwd(arg0: Array, axis: ArrayShape) -> Array",
                            "summary": "Creates a view of the input array with its dimensions permuted based on the given axis."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Permute",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  },
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to permute, and the list of axes to permute.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The number of axes in the list must not exceed the number of dimensions of the ArrayShape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Permutes the dimensions of an array shape given a list of axes, in an inverse manner to the permute_shape function."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array, must be mutable.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The input array and the axis to permute.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "The axis must be a valid permutation of the input array's dimensions.",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Permutes the input array based on the given axis and stores the result in the current array (curr). The first agument is set as the base of the current array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "Primal input arrays.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "Gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nImplements reverse-mode automatic differentiation for permutation.\nReturns arrays with shape zero for inputs that do not require gradients.\n\n#### See Also:\npermute_inv_jvp: Forward-mode autodiff for permutation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "List[Array]: Gradients with respect to each input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Compute vector-Jacobian product for array permutation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis to permute.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Examples:\n```python\na = Array([[1, 2], [3, 4]])\nresult = permute_inv(a, axis=List(-1,-2))\nprint(result)\n```\n\n#### This function supports\n- Automatic differentiation (forward and reverse modes).\n- Complex valued arguments.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array with its dimensions permuted.",
                            "signature": "fwd(arg0: Array, axis: ArrayShape) -> Array",
                            "summary": "Creates a view of the input array with its dimensions permuted based on the given axis."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "InvPermute",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "real",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "real",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The real part of the input array.",
                        "signature": "real(arg0: Array) -> Array",
                        "summary": "Computes the real part of the input array element-wise."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "real_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to compute the real part of.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of the real part of a complex array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the real view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the real operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThis function is non-differentiable.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array as a real array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Creates a view of the input array as a real array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Real",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "squeeze",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "squeeze",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The squeezed array.",
                        "signature": "squeeze(arg0: Array) -> Array",
                        "summary": "Squeezes the input array by removing axes of length 1."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "squeeze_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "squeezable_axis",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "squeezable_axis",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "squeezable_axis(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to squeeze.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after squeezing. This removes all dimensions of size 1."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the squeeze view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the squeeze operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for squeeze is computed by unsqueezing the gradient along the axes that were squeezed.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the squeeze operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The squeezed array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Squeezes the input array by removing axes of length 1."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Squeeze",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "unsqueeze",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The axis to unsqueeze.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "ArrayShape"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "unsqueeze",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The unsqueezed array.",
                        "signature": "unsqueeze(arg0: Array, axis: ArrayShape) -> Array",
                        "summary": "Unsqueezes the input array by adding axes of length 1."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "unsqueeze_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to unsqueeze, and the axes to unsqueeze along encoded in an ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after unsqueezing. This adds dimensions of size 1 along the specified axes."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the unsqueeze view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the unsqueeze operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass (unused in this function).",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for unsqueeze is computed by squeezing the gradient.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the unsqueeze operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The axis to unsqueeze.",
                                "kind": "argument",
                                "name": "axis",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The unsqueezed array.",
                            "signature": "fwd(arg0: Array, axis: ArrayShape) -> Array",
                            "summary": "Unsqueezes the input array by adding axes of length 1."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Unsqueeze",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "view_as_imag",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is non-differentiable.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "view_as_imag",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array as an imaginary array.",
                        "signature": "view_as_imag(arg0: Array) -> Array",
                        "summary": "Creates a view of the input array as an imaginary array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "view_as_imag_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to view as the imaginary part.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after viewing it as the imaginary part of a complex array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the view_as_imag view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the view_as_imag operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThis function is non-differentiable.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array as an imaginary array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Creates a view of the input array as an imaginary array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ViewAsImag",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "view_as_real",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "view_as_real",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "A view of the input array as the real part of a complex array.",
                        "signature": "view_as_real(arg0: Array) -> Array",
                        "summary": "Creates a view of the input array as the real part of a complex array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "view_as_real_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to view as the real part.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after viewing it as the real part of a complex array."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the view_as_real view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the view_as_real operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "A view of the input array as a real array.",
                            "signature": "fwd(arg0: Array) -> Array",
                            "summary": "Creates a view of the input array as a real array."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "ViewAsReal",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "reshape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Constraints:\n- The number of elements in the input array must be equal to the number of elements in the target shape.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reshape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The reshaped array.",
                        "signature": "reshape(arg0: Array, shape: List[Int]) -> Array",
                        "summary": "Creates a view of the input array with the given shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "view",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          },
                          {
                            "convention": "read",
                            "description": "The target shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Constraints:\n- The number of elements in the input array must be equal to the number of elements in the target shape.\n\n#### Note:\nThis function is a wrapper around the reshape function.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "view",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The reshaped array.",
                        "signature": "view(arg0: Array, shape: List[Int]) -> Array",
                        "summary": "Creates a view of the input array with the given shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "flatten",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "The input array.",
                            "kind": "argument",
                            "name": "arg0",
                            "passingKind": "pos_or_kw",
                            "type": "Array"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "#### Note:\nThis function is a wrapper around the reshape function.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "flatten",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "The flattened array.",
                        "signature": "flatten(arg0: Array) -> Array",
                        "summary": "Flattens the input array."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "view_op",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "compute_shape",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The ArrayShape to store the result of the computation.",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "ArrayShape"
                              },
                              {
                                "convention": "read",
                                "description": "The ArrayShape to reshape, and the shape, stride and storage offset of the target ArrayShape encoded in a  single ArrayShape.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[ArrayShape]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "compute_shape",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "compute_shape(mut curr: ArrayShape, args: List[ArrayShape])",
                            "summary": "Computes the shape of an array after reshaping."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__call__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "mut",
                                "description": "The current array to store the result (modified in-place).",
                                "kind": "argument",
                                "name": "curr",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The array on which the reshape view is created.",
                                "kind": "argument",
                                "name": "args",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe information of the shape computation is stored in the ArrayShape object of the curr array.\n\n#### Constraints:\n- The number of elements in the input array must be equal to the number of elements in the target shape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "__call__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__call__(mut curr: Array, args: List[Array])",
                            "summary": "Performs the forward pass for the reshape operation. It sets the base of the argument to be the base of the current array and computes the shape of the current array via its dedicated ArraySahpe fwd fucntion."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "jvp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "tangents",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "jvp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "jvp(primals: List[Array], tangents: List[Array]) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "vjp",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "A list containing the primal input array.",
                                "kind": "argument",
                                "name": "primals",
                                "passingKind": "pos_or_kw",
                                "type": "List[Array]"
                              },
                              {
                                "convention": "read",
                                "description": "The gradient of the output with respect to some scalar function.",
                                "kind": "argument",
                                "name": "grad",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The output of the forward pass.",
                                "kind": "argument",
                                "name": "out",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Note:\nThe vector-Jacobian product for reshape is computed by calling the reshape operation.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "vjp",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "A list containing the gradient with respect to the input.",
                            "signature": "vjp(primals: List[Array], grad: Array, out: Array) -> List[Array]",
                            "summary": "Computes the vector-Jacobian product for the reshape operation."
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "fwd",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "The input array.",
                                "kind": "argument",
                                "name": "arg0",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              },
                              {
                                "convention": "read",
                                "description": "The target shape.",
                                "kind": "argument",
                                "name": "shape",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "#### Constraints:\n- The number of elements in the input array must be equal to the number of elements in the target shape.",
                            "isDef": false,
                            "isStatic": true,
                            "kind": "function",
                            "name": "fwd",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "The reshaped array.",
                            "signature": "fwd(arg0: Array, shape: List[Int]) -> Array",
                            "summary": "Creates a view of the input array with the given shape."
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "Reshape",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "DifferentiableViewOp",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "view_ops",
            "packages": [],
            "summary": ""
          }
        ],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "linalg",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "nn",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "models",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "mlp",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "args",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mlp",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Array",
                        "returnsDoc": "",
                        "signature": "mlp(args: List[Array]) -> Array",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "mlp",
                "structs": [
                  {
                    "aliases": [],
                    "constraints": "",
                    "convention": "memory_only",
                    "deprecated": "",
                    "description": "",
                    "fields": [
                      {
                        "description": "",
                        "kind": "field",
                        "name": "weights",
                        "summary": "",
                        "type": "List[Array]"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "biases",
                        "summary": "",
                        "type": "List[Array]"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "hidden_dims",
                        "summary": "",
                        "type": "List[Int]"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "num_layers",
                        "summary": "",
                        "type": "Int"
                      },
                      {
                        "description": "",
                        "kind": "field",
                        "name": "compute_backward",
                        "summary": "",
                        "type": "Bool"
                      }
                    ],
                    "functions": [
                      {
                        "kind": "function",
                        "name": "__init__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "out",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "hidden_dims",
                                "passingKind": "pos_or_kw",
                                "type": "List[Int]"
                              },
                              {
                                "convention": "read",
                                "default": "False",
                                "description": "",
                                "kind": "argument",
                                "name": "compute_backward",
                                "passingKind": "pos_or_kw",
                                "type": "Bool"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__init__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": null,
                            "returnsDoc": "",
                            "signature": "__init__(out self, hidden_dims: List[Int], compute_backward: Bool = False)",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "forward",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              },
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "x",
                                "passingKind": "pos_or_kw",
                                "type": "Array"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "forward",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "Array",
                            "returnsDoc": "",
                            "signature": "forward(self, x: Array) -> Array",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "params",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "params",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "List[Array]",
                            "returnsDoc": "",
                            "signature": "params(self) -> List[Array]",
                            "summary": ""
                          }
                        ]
                      },
                      {
                        "kind": "function",
                        "name": "__str__",
                        "overloads": [
                          {
                            "args": [
                              {
                                "convention": "read",
                                "description": "",
                                "kind": "argument",
                                "name": "self",
                                "passingKind": "pos_or_kw",
                                "type": "Self"
                              }
                            ],
                            "async": false,
                            "constraints": "",
                            "deprecated": "",
                            "description": "",
                            "isDef": false,
                            "isStatic": false,
                            "kind": "function",
                            "name": "__str__",
                            "parameters": [],
                            "raises": true,
                            "raisesDoc": "",
                            "returnType": "String",
                            "returnsDoc": "",
                            "signature": "__str__(self) -> String",
                            "summary": ""
                          }
                        ]
                      }
                    ],
                    "kind": "struct",
                    "name": "MLP",
                    "parameters": [],
                    "parentTraits": [
                      "AnyType",
                      "StringableRaising",
                      "UnknownDestructibility"
                    ],
                    "summary": ""
                  }
                ],
                "summary": "",
                "traits": []
              }
            ],
            "name": "modules",
            "packages": [],
            "summary": ""
          }
        ],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "numpy",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "adagrad",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "params",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "lr",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "eps",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "cache",
                    "summary": "",
                    "type": "List[Array]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100>)",
                            "description": "",
                            "kind": "argument",
                            "name": "lr",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100000000>)",
                            "description": "",
                            "kind": "argument",
                            "name": "eps",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, params: List[Array], lr: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100>), eps: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100000000>))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "step",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "step",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "step(mut self)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Adagrad",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "adam",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "params",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "lr",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "beta1",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "beta2",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "eps",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "t",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "m",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "v",
                    "summary": "",
                    "type": "List[Array]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|1000>)",
                            "description": "",
                            "kind": "argument",
                            "name": "lr",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<9|10>)",
                            "description": "",
                            "kind": "argument",
                            "name": "beta1",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<999|1000>)",
                            "description": "",
                            "kind": "argument",
                            "name": "beta2",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100000000>)",
                            "description": "",
                            "kind": "argument",
                            "name": "eps",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, params: List[Array], lr: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|1000>), beta1: SIMD[float32, 1] = SIMD(#kgen.float_literal<9|10>), beta2: SIMD[float32, 1] = SIMD(#kgen.float_literal<999|1000>), eps: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100000000>))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "step",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "step",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "step(mut self)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Adam",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "rmsprop",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "params",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "lr",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "alpha",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "eps",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "cache",
                    "summary": "",
                    "type": "List[Array]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100>)",
                            "description": "",
                            "kind": "argument",
                            "name": "lr",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<99|100>)",
                            "description": "",
                            "kind": "argument",
                            "name": "alpha",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100000000>)",
                            "description": "",
                            "kind": "argument",
                            "name": "eps",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, params: List[Array], lr: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100>), alpha: SIMD[float32, 1] = SIMD(#kgen.float_literal<99|100>), eps: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100000000>))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "step",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "step",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "step(mut self)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "RMSprop",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "sgd",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "params",
                    "summary": "",
                    "type": "List[Array]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "lr",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "momentum",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "weight_decay",
                    "summary": "",
                    "type": "SIMD[float32, 1]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "velocity",
                    "summary": "",
                    "type": "List[Array]"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "params",
                            "passingKind": "pos_or_kw",
                            "type": "List[Array]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(#kgen.float_literal<1|100>)",
                            "description": "",
                            "kind": "argument",
                            "name": "lr",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "momentum",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          },
                          {
                            "convention": "read",
                            "default": "SIMD(0)",
                            "description": "",
                            "kind": "argument",
                            "name": "weight_decay",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[float32, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, params: List[Array], lr: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|100>), momentum: SIMD[float32, 1] = SIMD(0), weight_decay: SIMD[float32, 1] = SIMD(0))",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "step",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "mut",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "step",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "step(mut self)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "SGD",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          }
        ],
        "name": "optim",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "dtype",
                "summary": "",
                "value": "float32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "NA",
                "summary": "",
                "value": "List()"
              }
            ],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "nelts",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "nelts",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Int",
                    "returnsDoc": "",
                    "signature": "nelts[dtype: DType]() -> Int",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "aliases",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "to_torch",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_torch",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "",
                    "signature": "to_torch(arg: Array) -> PythonObject",
                    "summary": "Converts an endia Array to a torch tensor."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "to_torch_tensor",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "arg",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_torch_tensor",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "",
                    "signature": "to_torch_tensor(arg: Array) -> PythonObject",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "is_close",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "x",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "x_torch",
                        "passingKind": "pos_or_kw",
                        "type": "PythonObject"
                      },
                      {
                        "convention": "read",
                        "default": "SIMD(#kgen.float_literal<1|10000>)",
                        "description": "",
                        "kind": "argument",
                        "name": "rtol",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[float32, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_close",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "",
                    "signature": "is_close(x: Array, x_torch: PythonObject, rtol: SIMD[float32, 1] = SIMD(#kgen.float_literal<1|10000>)) -> Bool",
                    "summary": "Checks if the values in the endia Array and the torch tensor are equal up to a relative tolerance."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "array_conversions",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "reset_node_id_recursive",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "reset_node_id_recursive",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "reset_node_id_recursive(mut curr: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "top_order_rec",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "trace",
                        "passingKind": "pos_or_kw",
                        "type": "List[Array]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "top_order_rec",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "top_order_rec(mut curr: Array, mut trace: List[Array])",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "zero_grad_recursive",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zero_grad_recursive",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "zero_grad_recursive(mut curr: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "zero_grad_rec",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zero_grad_rec",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "zero_grad_rec(mut curr: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "remove_grad_recursive",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "remove_grad_recursive",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "remove_grad_recursive(mut curr: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "remove_grad_rec",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "mut",
                        "description": "",
                        "kind": "argument",
                        "name": "curr",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "remove_grad_rec",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "remove_grad_rec(mut curr: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "concat_lists",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "*lists",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "concat_lists",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "List[Int]",
                    "returnsDoc": "",
                    "signature": "concat_lists(*lists: List[Int]) -> List[Int]",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "list_contains",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "The list of Ints to check.",
                        "kind": "argument",
                        "name": "list",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      },
                      {
                        "convention": "read",
                        "description": "The value to check for.",
                        "kind": "argument",
                        "name": "val",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "list_contains",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "True if the value is in the list, False otherwise.",
                    "signature": "list_contains(list: List[Int], val: Int) -> Bool",
                    "summary": "Checks if a list fo Ints contains a specific value."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "general",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "convention": "memory_only",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "type",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "idx",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "arg_id",
                    "summary": "",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "out",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "type",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "read",
                            "default": "-1",
                            "description": "",
                            "kind": "argument",
                            "name": "arg_id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(out self, type: Int, idx: Int, arg_id: Int = -1)",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "InplaceInfo",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "UnknownDestructibility"
                ],
                "summary": ""
              }
            ],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "memcpy_to_numpy",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "PythonObject"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "tensor",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "memcpy_to_numpy",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "memcpy_to_numpy(array: PythonObject, tensor: Array)",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "shape_to_python_list",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "List[Int]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "shape_to_python_list",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "",
                    "signature": "shape_to_python_list(shape: List[Int]) -> PythonObject",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "get_np_dtype",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "np",
                        "passingKind": "pos_or_kw",
                        "type": "PythonObject"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "get_np_dtype",
                    "parameters": [
                      {
                        "description": "",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "",
                    "signature": "get_np_dtype[dtype: DType](np: PythonObject) -> PythonObject",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "array_to_numpy",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "tensor",
                        "passingKind": "pos_or_kw",
                        "type": "Array"
                      },
                      {
                        "convention": "read",
                        "description": "",
                        "kind": "argument",
                        "name": "np",
                        "passingKind": "pos_or_kw",
                        "type": "PythonObject"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "array_to_numpy",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "",
                    "signature": "array_to_numpy(tensor: Array, np: PythonObject) -> PythonObject",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tensor_to_array",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "",
                        "kind": "argument",
                        "name": "src",
                        "passingKind": "pos_or_kw",
                        "type": "Tensor[float32]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tensor_to_array",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "Array",
                    "returnsDoc": "",
                    "signature": "tensor_to_array(owned src: Tensor[float32]) -> Array",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "python_utils",
            "structs": [],
            "summary": "",
            "traits": []
          }
        ],
        "name": "utils",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "data",
            "packages": [],
            "summary": ""
          }
        ],
        "summary": ""
      }
    ],
    "summary": ""
  },
  "version": "24.6.0"
}